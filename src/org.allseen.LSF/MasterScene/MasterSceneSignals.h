//-----------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
//
//   For more information, see: http://go.microsoft.com/fwlink/?LinkID=623246
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace org { namespace allseen { namespace LSF { namespace ControllerService { namespace MasterScene {

ref class MasterSceneSignals;

public interface class IMasterSceneSignals
{
    event Windows::Foundation::TypedEventHandler<MasterSceneSignals^, MasterSceneMasterScenesNameChangedReceivedEventArgs^>^ MasterScenesNameChangedReceived;
    event Windows::Foundation::TypedEventHandler<MasterSceneSignals^, MasterSceneMasterScenesCreatedReceivedEventArgs^>^ MasterScenesCreatedReceived;
    event Windows::Foundation::TypedEventHandler<MasterSceneSignals^, MasterSceneMasterScenesUpdatedReceivedEventArgs^>^ MasterScenesUpdatedReceived;
    event Windows::Foundation::TypedEventHandler<MasterSceneSignals^, MasterSceneMasterScenesDeletedReceivedEventArgs^>^ MasterScenesDeletedReceived;
    event Windows::Foundation::TypedEventHandler<MasterSceneSignals^, MasterSceneMasterScenesAppliedReceivedEventArgs^>^ MasterScenesAppliedReceived;
};

public ref class MasterSceneSignals sealed : [Windows::Foundation::Metadata::Default] IMasterSceneSignals
{
public:
    // Calling this method will send the MasterScenesNameChanged signal to every member of the session.
    void MasterScenesNameChanged(_In_ Windows::Foundation::Collections::IVectorView<Platform::String^>^ interfaceMemberMasterSceneIDs);

    // This event fires whenever the MasterScenesNameChanged signal is sent by another member of the session.
    virtual event Windows::Foundation::TypedEventHandler<MasterSceneSignals^, MasterSceneMasterScenesNameChangedReceivedEventArgs^>^ MasterScenesNameChangedReceived 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MasterSceneSignals^, MasterSceneMasterScenesNameChangedReceivedEventArgs^>^ handler) 
        { 
            return _MasterScenesNameChangedReceived += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MasterSceneSignals^>(sender), safe_cast<MasterSceneMasterScenesNameChangedReceivedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _MasterScenesNameChangedReceived -= token; 
        } 
    internal: 
        void raise(MasterSceneSignals^ sender, MasterSceneMasterScenesNameChangedReceivedEventArgs^ args) 
        { 
            _MasterScenesNameChangedReceived(sender, args);
        } 
    }

    // Calling this method will send the MasterScenesCreated signal to every member of the session.
    void MasterScenesCreated(_In_ Windows::Foundation::Collections::IVectorView<Platform::String^>^ interfaceMemberMasterSceneIDs);

    // This event fires whenever the MasterScenesCreated signal is sent by another member of the session.
    virtual event Windows::Foundation::TypedEventHandler<MasterSceneSignals^, MasterSceneMasterScenesCreatedReceivedEventArgs^>^ MasterScenesCreatedReceived 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MasterSceneSignals^, MasterSceneMasterScenesCreatedReceivedEventArgs^>^ handler) 
        { 
            return _MasterScenesCreatedReceived += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MasterSceneSignals^>(sender), safe_cast<MasterSceneMasterScenesCreatedReceivedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _MasterScenesCreatedReceived -= token; 
        } 
    internal: 
        void raise(MasterSceneSignals^ sender, MasterSceneMasterScenesCreatedReceivedEventArgs^ args) 
        { 
            _MasterScenesCreatedReceived(sender, args);
        } 
    }

    // Calling this method will send the MasterScenesUpdated signal to every member of the session.
    void MasterScenesUpdated(_In_ Windows::Foundation::Collections::IVectorView<Platform::String^>^ interfaceMemberMasterSceneIDs);

    // This event fires whenever the MasterScenesUpdated signal is sent by another member of the session.
    virtual event Windows::Foundation::TypedEventHandler<MasterSceneSignals^, MasterSceneMasterScenesUpdatedReceivedEventArgs^>^ MasterScenesUpdatedReceived 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MasterSceneSignals^, MasterSceneMasterScenesUpdatedReceivedEventArgs^>^ handler) 
        { 
            return _MasterScenesUpdatedReceived += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MasterSceneSignals^>(sender), safe_cast<MasterSceneMasterScenesUpdatedReceivedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _MasterScenesUpdatedReceived -= token; 
        } 
    internal: 
        void raise(MasterSceneSignals^ sender, MasterSceneMasterScenesUpdatedReceivedEventArgs^ args) 
        { 
            _MasterScenesUpdatedReceived(sender, args);
        } 
    }

    // Calling this method will send the MasterScenesDeleted signal to every member of the session.
    void MasterScenesDeleted(_In_ Windows::Foundation::Collections::IVectorView<Platform::String^>^ interfaceMemberMasterSceneIDs);

    // This event fires whenever the MasterScenesDeleted signal is sent by another member of the session.
    virtual event Windows::Foundation::TypedEventHandler<MasterSceneSignals^, MasterSceneMasterScenesDeletedReceivedEventArgs^>^ MasterScenesDeletedReceived 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MasterSceneSignals^, MasterSceneMasterScenesDeletedReceivedEventArgs^>^ handler) 
        { 
            return _MasterScenesDeletedReceived += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MasterSceneSignals^>(sender), safe_cast<MasterSceneMasterScenesDeletedReceivedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _MasterScenesDeletedReceived -= token; 
        } 
    internal: 
        void raise(MasterSceneSignals^ sender, MasterSceneMasterScenesDeletedReceivedEventArgs^ args) 
        { 
            _MasterScenesDeletedReceived(sender, args);
        } 
    }

    // Calling this method will send the MasterScenesApplied signal to every member of the session.
    void MasterScenesApplied(_In_ Windows::Foundation::Collections::IVectorView<Platform::String^>^ interfaceMemberMasterSceneIDs);

    // This event fires whenever the MasterScenesApplied signal is sent by another member of the session.
    virtual event Windows::Foundation::TypedEventHandler<MasterSceneSignals^, MasterSceneMasterScenesAppliedReceivedEventArgs^>^ MasterScenesAppliedReceived 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MasterSceneSignals^, MasterSceneMasterScenesAppliedReceivedEventArgs^>^ handler) 
        { 
            return _MasterScenesAppliedReceived += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MasterSceneSignals^>(sender), safe_cast<MasterSceneMasterScenesAppliedReceivedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _MasterScenesAppliedReceived -= token; 
        } 
    internal: 
        void raise(MasterSceneSignals^ sender, MasterSceneMasterScenesAppliedReceivedEventArgs^ args) 
        { 
            _MasterScenesAppliedReceived(sender, args);
        } 
    }

internal:
    void Initialize(_In_ org::allseen::LSF::ISignalEmitter^ emitter);
    void CallMasterScenesNameChangedReceived(_In_ MasterSceneSignals^ sender, _In_ MasterSceneMasterScenesNameChangedReceivedEventArgs^ args);
    void CallMasterScenesCreatedReceived(_In_ MasterSceneSignals^ sender, _In_ MasterSceneMasterScenesCreatedReceivedEventArgs^ args);
    void CallMasterScenesUpdatedReceived(_In_ MasterSceneSignals^ sender, _In_ MasterSceneMasterScenesUpdatedReceivedEventArgs^ args);
    void CallMasterScenesDeletedReceived(_In_ MasterSceneSignals^ sender, _In_ MasterSceneMasterScenesDeletedReceivedEventArgs^ args);
    void CallMasterScenesAppliedReceived(_In_ MasterSceneSignals^ sender, _In_ MasterSceneMasterScenesAppliedReceivedEventArgs^ args);

private:
	org::allseen::LSF::ISignalEmitter^ m_emitter;

    virtual event Windows::Foundation::EventHandler<Platform::Object^>^ _MasterScenesNameChangedReceived;
    virtual event Windows::Foundation::EventHandler<Platform::Object^>^ _MasterScenesCreatedReceived;
    virtual event Windows::Foundation::EventHandler<Platform::Object^>^ _MasterScenesUpdatedReceived;
    virtual event Windows::Foundation::EventHandler<Platform::Object^>^ _MasterScenesDeletedReceived;
    virtual event Windows::Foundation::EventHandler<Platform::Object^>^ _MasterScenesAppliedReceived;

    alljoyn_interfacedescription_member m_memberMasterScenesNameChanged;
    alljoyn_interfacedescription_member m_memberMasterScenesCreated;
    alljoyn_interfacedescription_member m_memberMasterScenesUpdated;
    alljoyn_interfacedescription_member m_memberMasterScenesDeleted;
    alljoyn_interfacedescription_member m_memberMasterScenesApplied;
};

} } } } } 
