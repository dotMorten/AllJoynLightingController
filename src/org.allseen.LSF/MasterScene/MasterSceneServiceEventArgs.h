//-----------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
//
//   For more information, see: http://go.microsoft.com/fwlink/?LinkID=623246
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace org { namespace allseen { namespace LSF { namespace ControllerService { namespace MasterScene {

// Methods
public ref class MasterSceneGetAllMasterSceneIDsCalledEventArgs sealed
{
public:
    MasterSceneGetAllMasterSceneIDsCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property MasterSceneGetAllMasterSceneIDsResult^ Result
    {
        MasterSceneGetAllMasterSceneIDsResult^ get() { return m_result; }
        void set(_In_ MasterSceneGetAllMasterSceneIDsResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<MasterSceneGetAllMasterSceneIDsResult^>^ GetResultAsync(MasterSceneGetAllMasterSceneIDsCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<MasterSceneGetAllMasterSceneIDsResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<MasterSceneGetAllMasterSceneIDsResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    MasterSceneGetAllMasterSceneIDsResult^ m_result;
};

public ref class MasterSceneGetMasterSceneNameCalledEventArgs sealed
{
public:
    MasterSceneGetMasterSceneNameCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberMasterSceneID, _In_ Platform::String^ interfaceMemberLanguage);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property MasterSceneGetMasterSceneNameResult^ Result
    {
        MasterSceneGetMasterSceneNameResult^ get() { return m_result; }
        void set(_In_ MasterSceneGetMasterSceneNameResult^ value) { m_result = value; }
    }

    property Platform::String^ MasterSceneID
    {
        Platform::String^ get() { return m_interfaceMemberMasterSceneID; }
    }

    property Platform::String^ Language
    {
        Platform::String^ get() { return m_interfaceMemberLanguage; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<MasterSceneGetMasterSceneNameResult^>^ GetResultAsync(MasterSceneGetMasterSceneNameCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<MasterSceneGetMasterSceneNameResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<MasterSceneGetMasterSceneNameResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    MasterSceneGetMasterSceneNameResult^ m_result;
    Platform::String^ m_interfaceMemberMasterSceneID;
    Platform::String^ m_interfaceMemberLanguage;
};

public ref class MasterSceneSetMasterSceneNameCalledEventArgs sealed
{
public:
    MasterSceneSetMasterSceneNameCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberMasterSceneID, _In_ Platform::String^ interfaceMemberMasterSceneName, _In_ Platform::String^ interfaceMemberLanguage);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property MasterSceneSetMasterSceneNameResult^ Result
    {
        MasterSceneSetMasterSceneNameResult^ get() { return m_result; }
        void set(_In_ MasterSceneSetMasterSceneNameResult^ value) { m_result = value; }
    }

    property Platform::String^ MasterSceneID
    {
        Platform::String^ get() { return m_interfaceMemberMasterSceneID; }
    }

    property Platform::String^ MasterSceneName
    {
        Platform::String^ get() { return m_interfaceMemberMasterSceneName; }
    }

    property Platform::String^ Language
    {
        Platform::String^ get() { return m_interfaceMemberLanguage; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<MasterSceneSetMasterSceneNameResult^>^ GetResultAsync(MasterSceneSetMasterSceneNameCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<MasterSceneSetMasterSceneNameResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<MasterSceneSetMasterSceneNameResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    MasterSceneSetMasterSceneNameResult^ m_result;
    Platform::String^ m_interfaceMemberMasterSceneID;
    Platform::String^ m_interfaceMemberMasterSceneName;
    Platform::String^ m_interfaceMemberLanguage;
};

public ref class MasterSceneCreateMasterSceneCalledEventArgs sealed
{
public:
    MasterSceneCreateMasterSceneCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Windows::Foundation::Collections::IVectorView<Platform::String^>^ interfaceMemberScenes, _In_ Platform::String^ interfaceMemberMasterSceneName, _In_ Platform::String^ interfaceMemberLanguage);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property MasterSceneCreateMasterSceneResult^ Result
    {
        MasterSceneCreateMasterSceneResult^ get() { return m_result; }
        void set(_In_ MasterSceneCreateMasterSceneResult^ value) { m_result = value; }
    }

    property Windows::Foundation::Collections::IVectorView<Platform::String^>^ Scenes
    {
        Windows::Foundation::Collections::IVectorView<Platform::String^>^ get() { return m_interfaceMemberScenes; }
    }

    property Platform::String^ MasterSceneName
    {
        Platform::String^ get() { return m_interfaceMemberMasterSceneName; }
    }

    property Platform::String^ Language
    {
        Platform::String^ get() { return m_interfaceMemberLanguage; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<MasterSceneCreateMasterSceneResult^>^ GetResultAsync(MasterSceneCreateMasterSceneCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<MasterSceneCreateMasterSceneResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<MasterSceneCreateMasterSceneResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    MasterSceneCreateMasterSceneResult^ m_result;
    Windows::Foundation::Collections::IVectorView<Platform::String^>^ m_interfaceMemberScenes;
    Platform::String^ m_interfaceMemberMasterSceneName;
    Platform::String^ m_interfaceMemberLanguage;
};

public ref class MasterSceneUpdateMasterSceneCalledEventArgs sealed
{
public:
    MasterSceneUpdateMasterSceneCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberMasterSceneID, _In_ Windows::Foundation::Collections::IVectorView<Platform::String^>^ interfaceMemberScenes);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property MasterSceneUpdateMasterSceneResult^ Result
    {
        MasterSceneUpdateMasterSceneResult^ get() { return m_result; }
        void set(_In_ MasterSceneUpdateMasterSceneResult^ value) { m_result = value; }
    }

    property Platform::String^ MasterSceneID
    {
        Platform::String^ get() { return m_interfaceMemberMasterSceneID; }
    }

    property Windows::Foundation::Collections::IVectorView<Platform::String^>^ Scenes
    {
        Windows::Foundation::Collections::IVectorView<Platform::String^>^ get() { return m_interfaceMemberScenes; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<MasterSceneUpdateMasterSceneResult^>^ GetResultAsync(MasterSceneUpdateMasterSceneCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<MasterSceneUpdateMasterSceneResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<MasterSceneUpdateMasterSceneResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    MasterSceneUpdateMasterSceneResult^ m_result;
    Platform::String^ m_interfaceMemberMasterSceneID;
    Windows::Foundation::Collections::IVectorView<Platform::String^>^ m_interfaceMemberScenes;
};

public ref class MasterSceneDeleteMasterSceneCalledEventArgs sealed
{
public:
    MasterSceneDeleteMasterSceneCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberMasterSceneID);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property MasterSceneDeleteMasterSceneResult^ Result
    {
        MasterSceneDeleteMasterSceneResult^ get() { return m_result; }
        void set(_In_ MasterSceneDeleteMasterSceneResult^ value) { m_result = value; }
    }

    property Platform::String^ MasterSceneID
    {
        Platform::String^ get() { return m_interfaceMemberMasterSceneID; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<MasterSceneDeleteMasterSceneResult^>^ GetResultAsync(MasterSceneDeleteMasterSceneCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<MasterSceneDeleteMasterSceneResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<MasterSceneDeleteMasterSceneResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    MasterSceneDeleteMasterSceneResult^ m_result;
    Platform::String^ m_interfaceMemberMasterSceneID;
};

public ref class MasterSceneGetMasterSceneCalledEventArgs sealed
{
public:
    MasterSceneGetMasterSceneCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberMasterSceneID);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property MasterSceneGetMasterSceneResult^ Result
    {
        MasterSceneGetMasterSceneResult^ get() { return m_result; }
        void set(_In_ MasterSceneGetMasterSceneResult^ value) { m_result = value; }
    }

    property Platform::String^ MasterSceneID
    {
        Platform::String^ get() { return m_interfaceMemberMasterSceneID; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<MasterSceneGetMasterSceneResult^>^ GetResultAsync(MasterSceneGetMasterSceneCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<MasterSceneGetMasterSceneResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<MasterSceneGetMasterSceneResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    MasterSceneGetMasterSceneResult^ m_result;
    Platform::String^ m_interfaceMemberMasterSceneID;
};

public ref class MasterSceneApplyMasterSceneCalledEventArgs sealed
{
public:
    MasterSceneApplyMasterSceneCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberMasterSceneID);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property MasterSceneApplyMasterSceneResult^ Result
    {
        MasterSceneApplyMasterSceneResult^ get() { return m_result; }
        void set(_In_ MasterSceneApplyMasterSceneResult^ value) { m_result = value; }
    }

    property Platform::String^ MasterSceneID
    {
        Platform::String^ get() { return m_interfaceMemberMasterSceneID; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<MasterSceneApplyMasterSceneResult^>^ GetResultAsync(MasterSceneApplyMasterSceneCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<MasterSceneApplyMasterSceneResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<MasterSceneApplyMasterSceneResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    MasterSceneApplyMasterSceneResult^ m_result;
    Platform::String^ m_interfaceMemberMasterSceneID;
};

// Readable Properties
public ref class MasterSceneGetVersionRequestedEventArgs sealed
{
public:
    MasterSceneGetVersionRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property MasterSceneGetVersionResult^ Result
    {
        MasterSceneGetVersionResult^ get() { return m_result; }
        void set(_In_ MasterSceneGetVersionResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<MasterSceneGetVersionResult^>^ GetResultAsync(MasterSceneGetVersionRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<MasterSceneGetVersionResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<MasterSceneGetVersionResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    MasterSceneGetVersionResult^ m_result;
};

// Writable Properties
} } } } } 
