//-----------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
//
//   For more information, see: http://go.microsoft.com/fwlink/?LinkID=623246
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace org { namespace allseen { namespace LSF { namespace ControllerService { namespace MasterScene {

public interface class IMasterSceneConsumer
{
};

public ref class MasterSceneConsumer sealed  : [Windows::Foundation::Metadata::Default] IMasterSceneConsumer, org::allseen::LSF::ISignalEmitter
{
public:
    MasterSceneConsumer(Windows::Devices::AllJoyn::AllJoynBusAttachment^ busAttachment);
    virtual ~MasterSceneConsumer();

    // Create a consumer from a device Id asynchronously.
    //
    // This is usually called to create a consumer after the unique name of a producer has been reported
    // in the Added callback on the DeviceWatcher.
    static Windows::Foundation::IAsyncOperation<MasterSceneConsumer^>^ FromIdAsync(_In_ Platform::String^ deviceId);

    // Create a consumer from a device Id asynchronously with the provided bus attachment.
    //
    // This is usually called to create a consumer after the unique name of a producer has been reported
    // in the Added callback on the DeviceWatcher.
    static Windows::Foundation::IAsyncOperation<MasterSceneConsumer^>^ FromIdAsync(_In_ Platform::String^ deviceId, _In_ Windows::Devices::AllJoyn::AllJoynBusAttachment^ busAttachment);

    int32 MasterSceneConsumer::Initialize(_In_ Windows::Devices::AllJoyn::AllJoynServiceInfo^ serviceInfo);

    // Call the GetAllMasterSceneIDs method
    Windows::Foundation::IAsyncOperation<MasterSceneGetAllMasterSceneIDsResult^>^ GetAllMasterSceneIDsAsync();
    // Call the GetMasterSceneName method
    Windows::Foundation::IAsyncOperation<MasterSceneGetMasterSceneNameResult^>^ GetMasterSceneNameAsync(_In_ Platform::String^ interfaceMemberMasterSceneID, _In_ Platform::String^ interfaceMemberLanguage);
    // Call the SetMasterSceneName method
    Windows::Foundation::IAsyncOperation<MasterSceneSetMasterSceneNameResult^>^ SetMasterSceneNameAsync(_In_ Platform::String^ interfaceMemberMasterSceneID, _In_ Platform::String^ interfaceMemberMasterSceneName, _In_ Platform::String^ interfaceMemberLanguage);
    // Call the CreateMasterScene method
    Windows::Foundation::IAsyncOperation<MasterSceneCreateMasterSceneResult^>^ CreateMasterSceneAsync(_In_ Windows::Foundation::Collections::IVectorView<Platform::String^>^ interfaceMemberScenes, _In_ Platform::String^ interfaceMemberMasterSceneName, _In_ Platform::String^ interfaceMemberLanguage);
    // Call the UpdateMasterScene method
    Windows::Foundation::IAsyncOperation<MasterSceneUpdateMasterSceneResult^>^ UpdateMasterSceneAsync(_In_ Platform::String^ interfaceMemberMasterSceneID, _In_ Windows::Foundation::Collections::IVectorView<Platform::String^>^ interfaceMemberScenes);
    // Call the DeleteMasterScene method
    Windows::Foundation::IAsyncOperation<MasterSceneDeleteMasterSceneResult^>^ DeleteMasterSceneAsync(_In_ Platform::String^ interfaceMemberMasterSceneID);
    // Call the GetMasterScene method
    Windows::Foundation::IAsyncOperation<MasterSceneGetMasterSceneResult^>^ GetMasterSceneAsync(_In_ Platform::String^ interfaceMemberMasterSceneID);
    // Call the ApplyMasterScene method
    Windows::Foundation::IAsyncOperation<MasterSceneApplyMasterSceneResult^>^ ApplyMasterSceneAsync(_In_ Platform::String^ interfaceMemberMasterSceneID);

    // Get the value of the Version property.
    Windows::Foundation::IAsyncOperation<MasterSceneGetVersionResult^>^ GetVersionAsync();


    // Used to send signals or register functions to handle received signals.
    property MasterSceneSignals^ Signals
    {
        MasterSceneSignals^ get() { return m_signals; }
    }

    // Used to get the name of the interface this consumer implements.
    static property Platform::String^ InterfaceName
    {
        Platform::String^ get() { return AllJoynHelpers::MultibyteToPlatformString(m_interfaceName); }
    }

    virtual property Windows::Devices::AllJoyn::AllJoynBusObject^ BusObject
    {
        Windows::Devices::AllJoyn::AllJoynBusObject^ get() { return m_busObject; }
    }

    virtual property Windows::Devices::AllJoyn::AllJoynSession^ Session
    {
        Windows::Devices::AllJoyn::AllJoynSession^ get() { return m_session; }
    }

internal:
    // Consumers do not support property get.
    QStatus OnPropertyGet(_In_ PCSTR interfaceName, _In_ PCSTR propertyName, _Inout_ alljoyn_msgarg val)
    {
        UNREFERENCED_PARAMETER(interfaceName); UNREFERENCED_PARAMETER(propertyName); UNREFERENCED_PARAMETER(val);
        return ER_NOT_IMPLEMENTED;
    }

    // Consumers do not support property set.
    QStatus OnPropertySet(_In_ PCSTR interfaceName, _In_ PCSTR propertyName, _In_ alljoyn_msgarg val)
    {
        UNREFERENCED_PARAMETER(interfaceName); UNREFERENCED_PARAMETER(propertyName); UNREFERENCED_PARAMETER(val);
        return ER_NOT_IMPLEMENTED;
    }

    void OnPropertyChanged(_In_ alljoyn_proxybusobject obj, _In_ PCSTR interfaceName, _In_ const alljoyn_msgarg changed, _In_ const alljoyn_msgarg invalidated);

    property Platform::String^ ServiceObjectPath
    {
        Platform::String^ get() { return m_ServiceObjectPath; }
        void set(Platform::String^ value) { m_ServiceObjectPath = value; }
    }

    property alljoyn_proxybusobject ProxyBusObject
    {
        alljoyn_proxybusobject get() { return m_proxyBusObject; }
        void set(alljoyn_proxybusobject value) { m_proxyBusObject = value; }
    }

private:
    virtual event Windows::Foundation::EventHandler<Platform::Object^>^ _SessionLost;
    virtual event Windows::Foundation::EventHandler<Platform::Object^>^ _SessionMemberAdded;
    virtual event Windows::Foundation::EventHandler<Platform::Object^>^ _SessionMemberRemoved;

    // Register a callback function to handle incoming signals.
    QStatus AddSignalHandler(_In_ alljoyn_busattachment busAttachment, _In_ alljoyn_interfacedescription interfaceDescription, _In_ PCSTR methodName, _In_ alljoyn_messagereceiver_signalhandler_ptr handler);

    static void CallMasterScenesNameChangedSignalHandler(_In_ const alljoyn_interfacedescription_member* member, _In_ alljoyn_message message);
    static void CallMasterScenesCreatedSignalHandler(_In_ const alljoyn_interfacedescription_member* member, _In_ alljoyn_message message);
    static void CallMasterScenesUpdatedSignalHandler(_In_ const alljoyn_interfacedescription_member* member, _In_ alljoyn_message message);
    static void CallMasterScenesDeletedSignalHandler(_In_ const alljoyn_interfacedescription_member* member, _In_ alljoyn_message message);
    static void CallMasterScenesAppliedSignalHandler(_In_ const alljoyn_interfacedescription_member* member, _In_ alljoyn_message message);

    Windows::Devices::AllJoyn::AllJoynBusAttachment^ m_busAttachment;
    Windows::Devices::AllJoyn::AllJoynBusObject^ m_busObject;
    Windows::Devices::AllJoyn::AllJoynSession^ m_session;
    MasterSceneSignals^ m_signals;
    Platform::String^ m_ServiceObjectPath;

    alljoyn_proxybusobject m_proxyBusObject;
    alljoyn_sessionlistener m_sessionListener;
    alljoyn_busobject m_nativeBusObject;
    alljoyn_busattachment m_nativeBusAttachment;

    // Used to pass a pointer to this class to callbacks
    Platform::WeakReference* m_weak;

    // This map is required because we need a way to pass the consumer to the signal
    // handlers, but the current AllJoyn C API does not allow passing a context to these
    // callbacks.
    static std::map<alljoyn_interfacedescription, Platform::WeakReference*> SourceInterfaces;

    // The name of the interface this consumer implements.
    static PCSTR m_interfaceName;
};

} } } } } 
