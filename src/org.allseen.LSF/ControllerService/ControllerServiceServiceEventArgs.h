//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   For more information, see: http://go.microsoft.com/fwlink/?LinkID=623246
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace org { namespace allseen { namespace LSF { namespace ControllerService {

// Methods
public ref class ControllerServiceLightingResetControllerServiceCalledEventArgs sealed
{
public:
    ControllerServiceLightingResetControllerServiceCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ControllerServiceLightingResetControllerServiceResult^ Result
    {
        ControllerServiceLightingResetControllerServiceResult^ get() { return m_result; }
        void set(_In_ ControllerServiceLightingResetControllerServiceResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ControllerServiceLightingResetControllerServiceResult^>^ GetResultAsync(ControllerServiceLightingResetControllerServiceCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ControllerServiceLightingResetControllerServiceResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ControllerServiceLightingResetControllerServiceResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ControllerServiceLightingResetControllerServiceResult^ m_result;
};

public ref class ControllerServiceGetControllerServiceVersionCalledEventArgs sealed
{
public:
    ControllerServiceGetControllerServiceVersionCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ControllerServiceGetControllerServiceVersionResult^ Result
    {
        ControllerServiceGetControllerServiceVersionResult^ get() { return m_result; }
        void set(_In_ ControllerServiceGetControllerServiceVersionResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ControllerServiceGetControllerServiceVersionResult^>^ GetResultAsync(ControllerServiceGetControllerServiceVersionCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ControllerServiceGetControllerServiceVersionResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ControllerServiceGetControllerServiceVersionResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ControllerServiceGetControllerServiceVersionResult^ m_result;
};

// Readable Properties
public ref class ControllerServiceGetVersionRequestedEventArgs sealed
{
public:
    ControllerServiceGetVersionRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ControllerServiceGetVersionResult^ Result
    {
        ControllerServiceGetVersionResult^ get() { return m_result; }
        void set(_In_ ControllerServiceGetVersionResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ControllerServiceGetVersionResult^>^ GetResultAsync(ControllerServiceGetVersionRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ControllerServiceGetVersionResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ControllerServiceGetVersionResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ControllerServiceGetVersionResult^ m_result;
};

// Writable Properties
} } } } 
