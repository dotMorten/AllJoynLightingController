//-----------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
//
//   For more information, see: http://go.microsoft.com/fwlink/?LinkID=623246
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace org { namespace allseen { namespace LSF { namespace ControllerService { namespace Lamp {

// This class, and the associated EventArgs classes, exist for the benefit of JavaScript developers who
// do not have the ability to implement ILampService. Instead, LampServiceEventAdapter
// provides the Interface implementation and exposes a set of compatible events to the developer.
public ref class LampServiceEventAdapter sealed : [Windows::Foundation::Metadata::Default] ILampService
{
public:
    // Method Invocation Events
    event Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampGetAllLampIDsCalledEventArgs^>^ GetAllLampIDsCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampGetAllLampIDsCalledEventArgs^>^ handler) 
        { 
            return _GetAllLampIDsCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<LampServiceEventAdapter^>(sender), safe_cast<LampGetAllLampIDsCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetAllLampIDsCalled -= token; 
        } 
    internal: 
        void raise(LampServiceEventAdapter^ sender, LampGetAllLampIDsCalledEventArgs^ args) 
        { 
            _GetAllLampIDsCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampGetLampSupportedLanguagesCalledEventArgs^>^ GetLampSupportedLanguagesCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampGetLampSupportedLanguagesCalledEventArgs^>^ handler) 
        { 
            return _GetLampSupportedLanguagesCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<LampServiceEventAdapter^>(sender), safe_cast<LampGetLampSupportedLanguagesCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetLampSupportedLanguagesCalled -= token; 
        } 
    internal: 
        void raise(LampServiceEventAdapter^ sender, LampGetLampSupportedLanguagesCalledEventArgs^ args) 
        { 
            _GetLampSupportedLanguagesCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampGetLampManufacturerCalledEventArgs^>^ GetLampManufacturerCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampGetLampManufacturerCalledEventArgs^>^ handler) 
        { 
            return _GetLampManufacturerCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<LampServiceEventAdapter^>(sender), safe_cast<LampGetLampManufacturerCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetLampManufacturerCalled -= token; 
        } 
    internal: 
        void raise(LampServiceEventAdapter^ sender, LampGetLampManufacturerCalledEventArgs^ args) 
        { 
            _GetLampManufacturerCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampGetLampNameCalledEventArgs^>^ GetLampNameCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampGetLampNameCalledEventArgs^>^ handler) 
        { 
            return _GetLampNameCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<LampServiceEventAdapter^>(sender), safe_cast<LampGetLampNameCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetLampNameCalled -= token; 
        } 
    internal: 
        void raise(LampServiceEventAdapter^ sender, LampGetLampNameCalledEventArgs^ args) 
        { 
            _GetLampNameCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampSetLampNameCalledEventArgs^>^ SetLampNameCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampSetLampNameCalledEventArgs^>^ handler) 
        { 
            return _SetLampNameCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<LampServiceEventAdapter^>(sender), safe_cast<LampSetLampNameCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _SetLampNameCalled -= token; 
        } 
    internal: 
        void raise(LampServiceEventAdapter^ sender, LampSetLampNameCalledEventArgs^ args) 
        { 
            _SetLampNameCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampGetLampDetailsCalledEventArgs^>^ GetLampDetailsCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampGetLampDetailsCalledEventArgs^>^ handler) 
        { 
            return _GetLampDetailsCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<LampServiceEventAdapter^>(sender), safe_cast<LampGetLampDetailsCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetLampDetailsCalled -= token; 
        } 
    internal: 
        void raise(LampServiceEventAdapter^ sender, LampGetLampDetailsCalledEventArgs^ args) 
        { 
            _GetLampDetailsCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampGetLampParametersCalledEventArgs^>^ GetLampParametersCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampGetLampParametersCalledEventArgs^>^ handler) 
        { 
            return _GetLampParametersCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<LampServiceEventAdapter^>(sender), safe_cast<LampGetLampParametersCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetLampParametersCalled -= token; 
        } 
    internal: 
        void raise(LampServiceEventAdapter^ sender, LampGetLampParametersCalledEventArgs^ args) 
        { 
            _GetLampParametersCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampGetLampParametersFieldCalledEventArgs^>^ GetLampParametersFieldCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampGetLampParametersFieldCalledEventArgs^>^ handler) 
        { 
            return _GetLampParametersFieldCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<LampServiceEventAdapter^>(sender), safe_cast<LampGetLampParametersFieldCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetLampParametersFieldCalled -= token; 
        } 
    internal: 
        void raise(LampServiceEventAdapter^ sender, LampGetLampParametersFieldCalledEventArgs^ args) 
        { 
            _GetLampParametersFieldCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampGetLampStateCalledEventArgs^>^ GetLampStateCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampGetLampStateCalledEventArgs^>^ handler) 
        { 
            return _GetLampStateCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<LampServiceEventAdapter^>(sender), safe_cast<LampGetLampStateCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetLampStateCalled -= token; 
        } 
    internal: 
        void raise(LampServiceEventAdapter^ sender, LampGetLampStateCalledEventArgs^ args) 
        { 
            _GetLampStateCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampGetLampStateFieldCalledEventArgs^>^ GetLampStateFieldCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampGetLampStateFieldCalledEventArgs^>^ handler) 
        { 
            return _GetLampStateFieldCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<LampServiceEventAdapter^>(sender), safe_cast<LampGetLampStateFieldCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetLampStateFieldCalled -= token; 
        } 
    internal: 
        void raise(LampServiceEventAdapter^ sender, LampGetLampStateFieldCalledEventArgs^ args) 
        { 
            _GetLampStateFieldCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampTransitionLampStateCalledEventArgs^>^ TransitionLampStateCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampTransitionLampStateCalledEventArgs^>^ handler) 
        { 
            return _TransitionLampStateCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<LampServiceEventAdapter^>(sender), safe_cast<LampTransitionLampStateCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _TransitionLampStateCalled -= token; 
        } 
    internal: 
        void raise(LampServiceEventAdapter^ sender, LampTransitionLampStateCalledEventArgs^ args) 
        { 
            _TransitionLampStateCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampPulseLampWithStateCalledEventArgs^>^ PulseLampWithStateCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampPulseLampWithStateCalledEventArgs^>^ handler) 
        { 
            return _PulseLampWithStateCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<LampServiceEventAdapter^>(sender), safe_cast<LampPulseLampWithStateCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _PulseLampWithStateCalled -= token; 
        } 
    internal: 
        void raise(LampServiceEventAdapter^ sender, LampPulseLampWithStateCalledEventArgs^ args) 
        { 
            _PulseLampWithStateCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampPulseLampWithPresetCalledEventArgs^>^ PulseLampWithPresetCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampPulseLampWithPresetCalledEventArgs^>^ handler) 
        { 
            return _PulseLampWithPresetCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<LampServiceEventAdapter^>(sender), safe_cast<LampPulseLampWithPresetCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _PulseLampWithPresetCalled -= token; 
        } 
    internal: 
        void raise(LampServiceEventAdapter^ sender, LampPulseLampWithPresetCalledEventArgs^ args) 
        { 
            _PulseLampWithPresetCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampTransitionLampStateToPresetCalledEventArgs^>^ TransitionLampStateToPresetCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampTransitionLampStateToPresetCalledEventArgs^>^ handler) 
        { 
            return _TransitionLampStateToPresetCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<LampServiceEventAdapter^>(sender), safe_cast<LampTransitionLampStateToPresetCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _TransitionLampStateToPresetCalled -= token; 
        } 
    internal: 
        void raise(LampServiceEventAdapter^ sender, LampTransitionLampStateToPresetCalledEventArgs^ args) 
        { 
            _TransitionLampStateToPresetCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampTransitionLampStateFieldCalledEventArgs^>^ TransitionLampStateFieldCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampTransitionLampStateFieldCalledEventArgs^>^ handler) 
        { 
            return _TransitionLampStateFieldCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<LampServiceEventAdapter^>(sender), safe_cast<LampTransitionLampStateFieldCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _TransitionLampStateFieldCalled -= token; 
        } 
    internal: 
        void raise(LampServiceEventAdapter^ sender, LampTransitionLampStateFieldCalledEventArgs^ args) 
        { 
            _TransitionLampStateFieldCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampResetLampStateCalledEventArgs^>^ ResetLampStateCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampResetLampStateCalledEventArgs^>^ handler) 
        { 
            return _ResetLampStateCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<LampServiceEventAdapter^>(sender), safe_cast<LampResetLampStateCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _ResetLampStateCalled -= token; 
        } 
    internal: 
        void raise(LampServiceEventAdapter^ sender, LampResetLampStateCalledEventArgs^ args) 
        { 
            _ResetLampStateCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampResetLampStateFieldCalledEventArgs^>^ ResetLampStateFieldCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampResetLampStateFieldCalledEventArgs^>^ handler) 
        { 
            return _ResetLampStateFieldCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<LampServiceEventAdapter^>(sender), safe_cast<LampResetLampStateFieldCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _ResetLampStateFieldCalled -= token; 
        } 
    internal: 
        void raise(LampServiceEventAdapter^ sender, LampResetLampStateFieldCalledEventArgs^ args) 
        { 
            _ResetLampStateFieldCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampGetLampFaultsCalledEventArgs^>^ GetLampFaultsCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampGetLampFaultsCalledEventArgs^>^ handler) 
        { 
            return _GetLampFaultsCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<LampServiceEventAdapter^>(sender), safe_cast<LampGetLampFaultsCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetLampFaultsCalled -= token; 
        } 
    internal: 
        void raise(LampServiceEventAdapter^ sender, LampGetLampFaultsCalledEventArgs^ args) 
        { 
            _GetLampFaultsCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampClearLampFaultCalledEventArgs^>^ ClearLampFaultCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampClearLampFaultCalledEventArgs^>^ handler) 
        { 
            return _ClearLampFaultCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<LampServiceEventAdapter^>(sender), safe_cast<LampClearLampFaultCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _ClearLampFaultCalled -= token; 
        } 
    internal: 
        void raise(LampServiceEventAdapter^ sender, LampClearLampFaultCalledEventArgs^ args) 
        { 
            _ClearLampFaultCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampGetLampServiceVersionCalledEventArgs^>^ GetLampServiceVersionCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampGetLampServiceVersionCalledEventArgs^>^ handler) 
        { 
            return _GetLampServiceVersionCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<LampServiceEventAdapter^>(sender), safe_cast<LampGetLampServiceVersionCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetLampServiceVersionCalled -= token; 
        } 
    internal: 
        void raise(LampServiceEventAdapter^ sender, LampGetLampServiceVersionCalledEventArgs^ args) 
        { 
            _GetLampServiceVersionCalled(sender, args);
        } 
    }

    // Property Read Events
    event Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampGetVersionRequestedEventArgs^>^ GetVersionRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<LampServiceEventAdapter^, LampGetVersionRequestedEventArgs^>^ handler) 
        { 
            return _GetVersionRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<LampServiceEventAdapter^>(sender), safe_cast<LampGetVersionRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetVersionRequested -= token; 
        } 
    internal: 
        void raise(LampServiceEventAdapter^ sender, LampGetVersionRequestedEventArgs^ args) 
        { 
            _GetVersionRequested(sender, args);
        } 
    }

    // Property Write Events
    // ILampService Implementation
    virtual Windows::Foundation::IAsyncOperation<LampGetAllLampIDsResult^>^ GetAllLampIDsAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<LampGetLampSupportedLanguagesResult^>^ GetLampSupportedLanguagesAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberLampID);
    virtual Windows::Foundation::IAsyncOperation<LampGetLampManufacturerResult^>^ GetLampManufacturerAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberLampID, _In_ Platform::String^ interfaceMemberLanguage);
    virtual Windows::Foundation::IAsyncOperation<LampGetLampNameResult^>^ GetLampNameAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberLampID, _In_ Platform::String^ interfaceMemberLanguage);
    virtual Windows::Foundation::IAsyncOperation<LampSetLampNameResult^>^ SetLampNameAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberLampID, _In_ Platform::String^ interfaceMemberLampName, _In_ Platform::String^ interfaceMemberLanguage);
    virtual Windows::Foundation::IAsyncOperation<LampGetLampDetailsResult^>^ GetLampDetailsAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberLampID);
    virtual Windows::Foundation::IAsyncOperation<LampGetLampParametersResult^>^ GetLampParametersAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberLampID);
    virtual Windows::Foundation::IAsyncOperation<LampGetLampParametersFieldResult^>^ GetLampParametersFieldAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberLampID, _In_ Platform::String^ interfaceMemberLampParameterFieldName);
    virtual Windows::Foundation::IAsyncOperation<LampGetLampStateResult^>^ GetLampStateAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberLampID);
    virtual Windows::Foundation::IAsyncOperation<LampGetLampStateFieldResult^>^ GetLampStateFieldAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberLampID, _In_ Platform::String^ interfaceMemberLampStateFieldName);
    virtual Windows::Foundation::IAsyncOperation<LampTransitionLampStateResult^>^ TransitionLampStateAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberLampID, _In_ Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ interfaceMemberLampState, _In_ uint32 interfaceMemberTransitionPeriod);
    virtual Windows::Foundation::IAsyncOperation<LampPulseLampWithStateResult^>^ PulseLampWithStateAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberLampID, _In_ Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ interfaceMemberFromLampState, _In_ Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ interfaceMemberToLampState, _In_ uint32 interfaceMemberPeriod, _In_ uint32 interfaceMemberDuration, _In_ uint32 interfaceMemberNumPulses);
    virtual Windows::Foundation::IAsyncOperation<LampPulseLampWithPresetResult^>^ PulseLampWithPresetAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberLampID, _In_ Platform::String^ interfaceMemberFromPresetID, _In_ Platform::String^ interfaceMemberToPresetID, _In_ uint32 interfaceMemberPeriod, _In_ uint32 interfaceMemberDuration, _In_ uint32 interfaceMemberNumPulses);
    virtual Windows::Foundation::IAsyncOperation<LampTransitionLampStateToPresetResult^>^ TransitionLampStateToPresetAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberLampID, _In_ Platform::String^ interfaceMemberPresetID, _In_ uint32 interfaceMemberTransitionPeriod);
    virtual Windows::Foundation::IAsyncOperation<LampTransitionLampStateFieldResult^>^ TransitionLampStateFieldAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberLampID, _In_ Platform::String^ interfaceMemberLampStateFieldName, _In_ Platform::Object^ interfaceMemberLampStateFieldValue, _In_ uint32 interfaceMemberTransitionPeriod);
    virtual Windows::Foundation::IAsyncOperation<LampResetLampStateResult^>^ ResetLampStateAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberLampID);
    virtual Windows::Foundation::IAsyncOperation<LampResetLampStateFieldResult^>^ ResetLampStateFieldAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberLampID, _In_ Platform::String^ interfaceMemberLampStateFieldName);
    virtual Windows::Foundation::IAsyncOperation<LampGetLampFaultsResult^>^ GetLampFaultsAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberLampID);
    virtual Windows::Foundation::IAsyncOperation<LampClearLampFaultResult^>^ ClearLampFaultAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberLampID, _In_ uint32 interfaceMemberLampFault);
    virtual Windows::Foundation::IAsyncOperation<LampGetLampServiceVersionResult^>^ GetLampServiceVersionAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberLampID);

    virtual Windows::Foundation::IAsyncOperation<LampGetVersionResult^>^ GetVersionAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);


private:
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetAllLampIDsCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetLampSupportedLanguagesCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetLampManufacturerCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetLampNameCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _SetLampNameCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetLampDetailsCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetLampParametersCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetLampParametersFieldCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetLampStateCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetLampStateFieldCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _TransitionLampStateCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _PulseLampWithStateCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _PulseLampWithPresetCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _TransitionLampStateToPresetCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _TransitionLampStateFieldCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _ResetLampStateCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _ResetLampStateFieldCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetLampFaultsCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _ClearLampFaultCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetLampServiceVersionCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetVersionRequested;
};

} } } } } 
