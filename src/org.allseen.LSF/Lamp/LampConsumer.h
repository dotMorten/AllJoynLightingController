//-----------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
//
//   For more information, see: http://go.microsoft.com/fwlink/?LinkID=623246
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace org { namespace allseen { namespace LSF { namespace ControllerService { namespace Lamp {

public interface class ILampConsumer
{
};

public ref class LampConsumer sealed  : [Windows::Foundation::Metadata::Default] ILampConsumer, org::allseen::LSF::ISignalEmitter
{
public:
    LampConsumer(Windows::Devices::AllJoyn::AllJoynBusAttachment^ busAttachment);
    virtual ~LampConsumer();

    // Create a consumer from a device Id asynchronously.
    //
    // This is usually called to create a consumer after the unique name of a producer has been reported
    // in the Added callback on the DeviceWatcher.
    static Windows::Foundation::IAsyncOperation<LampConsumer^>^ FromIdAsync(_In_ Platform::String^ deviceId);

    // Create a consumer from a device Id asynchronously with the provided bus attachment.
    //
    // This is usually called to create a consumer after the unique name of a producer has been reported
    // in the Added callback on the DeviceWatcher.
    static Windows::Foundation::IAsyncOperation<LampConsumer^>^ FromIdAsync(_In_ Platform::String^ deviceId, _In_ Windows::Devices::AllJoyn::AllJoynBusAttachment^ busAttachment);

    int32 LampConsumer::Initialize(_In_ Windows::Devices::AllJoyn::AllJoynServiceInfo^ serviceInfo);

    // Call the GetAllLampIDs method
    Windows::Foundation::IAsyncOperation<LampGetAllLampIDsResult^>^ GetAllLampIDsAsync();
    // Call the GetLampSupportedLanguages method
    Windows::Foundation::IAsyncOperation<LampGetLampSupportedLanguagesResult^>^ GetLampSupportedLanguagesAsync(_In_ Platform::String^ interfaceMemberLampID);
    // Call the GetLampManufacturer method
    Windows::Foundation::IAsyncOperation<LampGetLampManufacturerResult^>^ GetLampManufacturerAsync(_In_ Platform::String^ interfaceMemberLampID, _In_ Platform::String^ interfaceMemberLanguage);
    // Call the GetLampName method
    Windows::Foundation::IAsyncOperation<LampGetLampNameResult^>^ GetLampNameAsync(_In_ Platform::String^ interfaceMemberLampID, _In_ Platform::String^ interfaceMemberLanguage);
    // Call the SetLampName method
    Windows::Foundation::IAsyncOperation<LampSetLampNameResult^>^ SetLampNameAsync(_In_ Platform::String^ interfaceMemberLampID, _In_ Platform::String^ interfaceMemberLampName, _In_ Platform::String^ interfaceMemberLanguage);
    // Call the GetLampDetails method
    Windows::Foundation::IAsyncOperation<LampGetLampDetailsResult^>^ GetLampDetailsAsync(_In_ Platform::String^ interfaceMemberLampID);
    // Call the GetLampParameters method
    Windows::Foundation::IAsyncOperation<LampGetLampParametersResult^>^ GetLampParametersAsync(_In_ Platform::String^ interfaceMemberLampID);
    // Call the GetLampParametersField method
    Windows::Foundation::IAsyncOperation<LampGetLampParametersFieldResult^>^ GetLampParametersFieldAsync(_In_ Platform::String^ interfaceMemberLampID, _In_ Platform::String^ interfaceMemberLampParameterFieldName);
    // Call the GetLampState method
    Windows::Foundation::IAsyncOperation<LampGetLampStateResult^>^ GetLampStateAsync(_In_ Platform::String^ interfaceMemberLampID);
    // Call the GetLampStateField method
    Windows::Foundation::IAsyncOperation<LampGetLampStateFieldResult^>^ GetLampStateFieldAsync(_In_ Platform::String^ interfaceMemberLampID, _In_ Platform::String^ interfaceMemberLampStateFieldName);
    // Call the TransitionLampState method
    Windows::Foundation::IAsyncOperation<LampTransitionLampStateResult^>^ TransitionLampStateAsync(_In_ Platform::String^ interfaceMemberLampID, _In_ Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ interfaceMemberLampState, _In_ uint32 interfaceMemberTransitionPeriod);
    // Call the PulseLampWithState method
    Windows::Foundation::IAsyncOperation<LampPulseLampWithStateResult^>^ PulseLampWithStateAsync(_In_ Platform::String^ interfaceMemberLampID, _In_ Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ interfaceMemberFromLampState, _In_ Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ interfaceMemberToLampState, _In_ uint32 interfaceMemberPeriod, _In_ uint32 interfaceMemberDuration, _In_ uint32 interfaceMemberNumPulses);
    // Call the PulseLampWithPreset method
    Windows::Foundation::IAsyncOperation<LampPulseLampWithPresetResult^>^ PulseLampWithPresetAsync(_In_ Platform::String^ interfaceMemberLampID, _In_ Platform::String^ interfaceMemberFromPresetID, _In_ Platform::String^ interfaceMemberToPresetID, _In_ uint32 interfaceMemberPeriod, _In_ uint32 interfaceMemberDuration, _In_ uint32 interfaceMemberNumPulses);
    // Call the TransitionLampStateToPreset method
    Windows::Foundation::IAsyncOperation<LampTransitionLampStateToPresetResult^>^ TransitionLampStateToPresetAsync(_In_ Platform::String^ interfaceMemberLampID, _In_ Platform::String^ interfaceMemberPresetID, _In_ uint32 interfaceMemberTransitionPeriod);
    // Call the TransitionLampStateField method
    Windows::Foundation::IAsyncOperation<LampTransitionLampStateFieldResult^>^ TransitionLampStateFieldAsync(_In_ Platform::String^ interfaceMemberLampID, _In_ Platform::String^ interfaceMemberLampStateFieldName, _In_ Platform::Object^ interfaceMemberLampStateFieldValue, _In_ uint32 interfaceMemberTransitionPeriod);
    // Call the ResetLampState method
    Windows::Foundation::IAsyncOperation<LampResetLampStateResult^>^ ResetLampStateAsync(_In_ Platform::String^ interfaceMemberLampID);
    // Call the ResetLampStateField method
    Windows::Foundation::IAsyncOperation<LampResetLampStateFieldResult^>^ ResetLampStateFieldAsync(_In_ Platform::String^ interfaceMemberLampID, _In_ Platform::String^ interfaceMemberLampStateFieldName);
    // Call the GetLampFaults method
    Windows::Foundation::IAsyncOperation<LampGetLampFaultsResult^>^ GetLampFaultsAsync(_In_ Platform::String^ interfaceMemberLampID);
    // Call the ClearLampFault method
    Windows::Foundation::IAsyncOperation<LampClearLampFaultResult^>^ ClearLampFaultAsync(_In_ Platform::String^ interfaceMemberLampID, _In_ uint32 interfaceMemberLampFault);
    // Call the GetLampServiceVersion method
    Windows::Foundation::IAsyncOperation<LampGetLampServiceVersionResult^>^ GetLampServiceVersionAsync(_In_ Platform::String^ interfaceMemberLampID);

    // Get the value of the Version property.
    Windows::Foundation::IAsyncOperation<LampGetVersionResult^>^ GetVersionAsync();


    // Used to send signals or register functions to handle received signals.
    property LampSignals^ Signals
    {
        LampSignals^ get() { return m_signals; }
    }

    // Used to get the name of the interface this consumer implements.
    static property Platform::String^ InterfaceName
    {
        Platform::String^ get() { return AllJoynHelpers::MultibyteToPlatformString(m_interfaceName); }
    }

    virtual property Windows::Devices::AllJoyn::AllJoynBusObject^ BusObject
    {
        Windows::Devices::AllJoyn::AllJoynBusObject^ get() { return m_busObject; }
    }

    virtual property Windows::Devices::AllJoyn::AllJoynSession^ Session
    {
        Windows::Devices::AllJoyn::AllJoynSession^ get() { return m_session; }
    }

internal:
    // Consumers do not support property get.
    QStatus OnPropertyGet(_In_ PCSTR interfaceName, _In_ PCSTR propertyName, _Inout_ alljoyn_msgarg val)
    {
        UNREFERENCED_PARAMETER(interfaceName); UNREFERENCED_PARAMETER(propertyName); UNREFERENCED_PARAMETER(val);
        return ER_NOT_IMPLEMENTED;
    }

    // Consumers do not support property set.
    QStatus OnPropertySet(_In_ PCSTR interfaceName, _In_ PCSTR propertyName, _In_ alljoyn_msgarg val)
    {
        UNREFERENCED_PARAMETER(interfaceName); UNREFERENCED_PARAMETER(propertyName); UNREFERENCED_PARAMETER(val);
        return ER_NOT_IMPLEMENTED;
    }

    void OnPropertyChanged(_In_ alljoyn_proxybusobject obj, _In_ PCSTR interfaceName, _In_ const alljoyn_msgarg changed, _In_ const alljoyn_msgarg invalidated);

    property Platform::String^ ServiceObjectPath
    {
        Platform::String^ get() { return m_ServiceObjectPath; }
        void set(Platform::String^ value) { m_ServiceObjectPath = value; }
    }

    property alljoyn_proxybusobject ProxyBusObject
    {
        alljoyn_proxybusobject get() { return m_proxyBusObject; }
        void set(alljoyn_proxybusobject value) { m_proxyBusObject = value; }
    }

private:
    virtual event Windows::Foundation::EventHandler<Platform::Object^>^ _SessionLost;
    virtual event Windows::Foundation::EventHandler<Platform::Object^>^ _SessionMemberAdded;
    virtual event Windows::Foundation::EventHandler<Platform::Object^>^ _SessionMemberRemoved;

    // Register a callback function to handle incoming signals.
    QStatus AddSignalHandler(_In_ alljoyn_busattachment busAttachment, _In_ alljoyn_interfacedescription interfaceDescription, _In_ PCSTR methodName, _In_ alljoyn_messagereceiver_signalhandler_ptr handler);

    static void CallLampNameChangedSignalHandler(_In_ const alljoyn_interfacedescription_member* member, _In_ alljoyn_message message);
    static void CallLampStateChangedSignalHandler(_In_ const alljoyn_interfacedescription_member* member, _In_ alljoyn_message message);
    static void CallLampsFoundSignalHandler(_In_ const alljoyn_interfacedescription_member* member, _In_ alljoyn_message message);
    static void CallLampsLostSignalHandler(_In_ const alljoyn_interfacedescription_member* member, _In_ alljoyn_message message);

    Windows::Devices::AllJoyn::AllJoynBusAttachment^ m_busAttachment;
    Windows::Devices::AllJoyn::AllJoynBusObject^ m_busObject;
    Windows::Devices::AllJoyn::AllJoynSession^ m_session;
    LampSignals^ m_signals;
    Platform::String^ m_ServiceObjectPath;

    alljoyn_proxybusobject m_proxyBusObject;
    alljoyn_sessionlistener m_sessionListener;
    alljoyn_busobject m_nativeBusObject;
    alljoyn_busattachment m_nativeBusAttachment;

    // Used to pass a pointer to this class to callbacks
    Platform::WeakReference* m_weak;

    // This map is required because we need a way to pass the consumer to the signal
    // handlers, but the current AllJoyn C API does not allow passing a context to these
    // callbacks.
    static std::map<alljoyn_interfacedescription, Platform::WeakReference*> SourceInterfaces;

    // The name of the interface this consumer implements.
    static PCSTR m_interfaceName;
};

} } } } } 
