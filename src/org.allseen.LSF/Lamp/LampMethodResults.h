//-----------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
//
//   For more information, see: http://go.microsoft.com/fwlink/?LinkID=623246
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

using namespace concurrency;

namespace org { namespace allseen { namespace LSF { namespace ControllerService { namespace Lamp {

ref class LampConsumer;

public ref class LampGetAllLampIDsResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property uint32 ResponseCode
    {
        uint32 get() { return m_interfaceMemberResponseCode; }
    internal:
        void set(_In_ uint32 value) { m_interfaceMemberResponseCode = value; }
    }
    property Windows::Foundation::Collections::IVector<Platform::String^>^ LampIDs
    {
        Windows::Foundation::Collections::IVector<Platform::String^>^ get() { return m_interfaceMemberLampIDs; }
    internal:
        void set(_In_ Windows::Foundation::Collections::IVector<Platform::String^>^ value) { m_interfaceMemberLampIDs = value; }
    }
    
    static LampGetAllLampIDsResult^ CreateSuccessResult(_In_ uint32 interfaceMemberResponseCode, _In_ Windows::Foundation::Collections::IVector<Platform::String^>^ interfaceMemberLampIDs)
    {
        auto result = ref new LampGetAllLampIDsResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->ResponseCode = interfaceMemberResponseCode;
        result->LampIDs = interfaceMemberLampIDs;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }
    
    static LampGetAllLampIDsResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new LampGetAllLampIDsResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
    uint32 m_interfaceMemberResponseCode;
    Windows::Foundation::Collections::IVector<Platform::String^>^ m_interfaceMemberLampIDs;
};

public ref class LampGetLampSupportedLanguagesResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property uint32 ResponseCode
    {
        uint32 get() { return m_interfaceMemberResponseCode; }
    internal:
        void set(_In_ uint32 value) { m_interfaceMemberResponseCode = value; }
    }
    property Platform::String^ LampID
    {
        Platform::String^ get() { return m_interfaceMemberLampID; }
    internal:
        void set(_In_ Platform::String^ value) { m_interfaceMemberLampID = value; }
    }
    property Windows::Foundation::Collections::IVector<Platform::String^>^ SupportedLanguages
    {
        Windows::Foundation::Collections::IVector<Platform::String^>^ get() { return m_interfaceMemberSupportedLanguages; }
    internal:
        void set(_In_ Windows::Foundation::Collections::IVector<Platform::String^>^ value) { m_interfaceMemberSupportedLanguages = value; }
    }
    
    static LampGetLampSupportedLanguagesResult^ CreateSuccessResult(_In_ uint32 interfaceMemberResponseCode, _In_ Platform::String^ interfaceMemberLampID, _In_ Windows::Foundation::Collections::IVector<Platform::String^>^ interfaceMemberSupportedLanguages)
    {
        auto result = ref new LampGetLampSupportedLanguagesResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->ResponseCode = interfaceMemberResponseCode;
        result->LampID = interfaceMemberLampID;
        result->SupportedLanguages = interfaceMemberSupportedLanguages;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }
    
    static LampGetLampSupportedLanguagesResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new LampGetLampSupportedLanguagesResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
    uint32 m_interfaceMemberResponseCode;
    Platform::String^ m_interfaceMemberLampID;
    Windows::Foundation::Collections::IVector<Platform::String^>^ m_interfaceMemberSupportedLanguages;
};

public ref class LampGetLampManufacturerResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property uint32 ResponseCode
    {
        uint32 get() { return m_interfaceMemberResponseCode; }
    internal:
        void set(_In_ uint32 value) { m_interfaceMemberResponseCode = value; }
    }
    property Platform::String^ LampID
    {
        Platform::String^ get() { return m_interfaceMemberLampID; }
    internal:
        void set(_In_ Platform::String^ value) { m_interfaceMemberLampID = value; }
    }
    property Platform::String^ Language
    {
        Platform::String^ get() { return m_interfaceMemberLanguage; }
    internal:
        void set(_In_ Platform::String^ value) { m_interfaceMemberLanguage = value; }
    }
    property Platform::String^ Manufacturer
    {
        Platform::String^ get() { return m_interfaceMemberManufacturer; }
    internal:
        void set(_In_ Platform::String^ value) { m_interfaceMemberManufacturer = value; }
    }
    
    static LampGetLampManufacturerResult^ CreateSuccessResult(_In_ uint32 interfaceMemberResponseCode, _In_ Platform::String^ interfaceMemberLampID, _In_ Platform::String^ interfaceMemberLanguage, _In_ Platform::String^ interfaceMemberManufacturer)
    {
        auto result = ref new LampGetLampManufacturerResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->ResponseCode = interfaceMemberResponseCode;
        result->LampID = interfaceMemberLampID;
        result->Language = interfaceMemberLanguage;
        result->Manufacturer = interfaceMemberManufacturer;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }
    
    static LampGetLampManufacturerResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new LampGetLampManufacturerResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
    uint32 m_interfaceMemberResponseCode;
    Platform::String^ m_interfaceMemberLampID;
    Platform::String^ m_interfaceMemberLanguage;
    Platform::String^ m_interfaceMemberManufacturer;
};

public ref class LampGetLampNameResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property uint32 ResponseCode
    {
        uint32 get() { return m_interfaceMemberResponseCode; }
    internal:
        void set(_In_ uint32 value) { m_interfaceMemberResponseCode = value; }
    }
    property Platform::String^ LampID
    {
        Platform::String^ get() { return m_interfaceMemberLampID; }
    internal:
        void set(_In_ Platform::String^ value) { m_interfaceMemberLampID = value; }
    }
    property Platform::String^ Language
    {
        Platform::String^ get() { return m_interfaceMemberLanguage; }
    internal:
        void set(_In_ Platform::String^ value) { m_interfaceMemberLanguage = value; }
    }
    property Platform::String^ LampName
    {
        Platform::String^ get() { return m_interfaceMemberLampName; }
    internal:
        void set(_In_ Platform::String^ value) { m_interfaceMemberLampName = value; }
    }
    
    static LampGetLampNameResult^ CreateSuccessResult(_In_ uint32 interfaceMemberResponseCode, _In_ Platform::String^ interfaceMemberLampID, _In_ Platform::String^ interfaceMemberLanguage, _In_ Platform::String^ interfaceMemberLampName)
    {
        auto result = ref new LampGetLampNameResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->ResponseCode = interfaceMemberResponseCode;
        result->LampID = interfaceMemberLampID;
        result->Language = interfaceMemberLanguage;
        result->LampName = interfaceMemberLampName;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }
    
    static LampGetLampNameResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new LampGetLampNameResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
    uint32 m_interfaceMemberResponseCode;
    Platform::String^ m_interfaceMemberLampID;
    Platform::String^ m_interfaceMemberLanguage;
    Platform::String^ m_interfaceMemberLampName;
};

public ref class LampSetLampNameResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property uint32 ResponseCode
    {
        uint32 get() { return m_interfaceMemberResponseCode; }
    internal:
        void set(_In_ uint32 value) { m_interfaceMemberResponseCode = value; }
    }
    property Platform::String^ LampID
    {
        Platform::String^ get() { return m_interfaceMemberLampID; }
    internal:
        void set(_In_ Platform::String^ value) { m_interfaceMemberLampID = value; }
    }
    property Platform::String^ Language
    {
        Platform::String^ get() { return m_interfaceMemberLanguage; }
    internal:
        void set(_In_ Platform::String^ value) { m_interfaceMemberLanguage = value; }
    }
    
    static LampSetLampNameResult^ CreateSuccessResult(_In_ uint32 interfaceMemberResponseCode, _In_ Platform::String^ interfaceMemberLampID, _In_ Platform::String^ interfaceMemberLanguage)
    {
        auto result = ref new LampSetLampNameResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->ResponseCode = interfaceMemberResponseCode;
        result->LampID = interfaceMemberLampID;
        result->Language = interfaceMemberLanguage;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }
    
    static LampSetLampNameResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new LampSetLampNameResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
    uint32 m_interfaceMemberResponseCode;
    Platform::String^ m_interfaceMemberLampID;
    Platform::String^ m_interfaceMemberLanguage;
};

public ref class LampGetLampDetailsResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property uint32 ResponseCode
    {
        uint32 get() { return m_interfaceMemberResponseCode; }
    internal:
        void set(_In_ uint32 value) { m_interfaceMemberResponseCode = value; }
    }
    property Platform::String^ LampID
    {
        Platform::String^ get() { return m_interfaceMemberLampID; }
    internal:
        void set(_In_ Platform::String^ value) { m_interfaceMemberLampID = value; }
    }
    property Windows::Foundation::Collections::IMap<Platform::String^,Platform::Object^>^ LampDetails
    {
        Windows::Foundation::Collections::IMap<Platform::String^,Platform::Object^>^ get() { return m_interfaceMemberLampDetails; }
    internal:
        void set(_In_ Windows::Foundation::Collections::IMap<Platform::String^,Platform::Object^>^ value) { m_interfaceMemberLampDetails = value; }
    }
    
    static LampGetLampDetailsResult^ CreateSuccessResult(_In_ uint32 interfaceMemberResponseCode, _In_ Platform::String^ interfaceMemberLampID, _In_ Windows::Foundation::Collections::IMap<Platform::String^,Platform::Object^>^ interfaceMemberLampDetails)
    {
        auto result = ref new LampGetLampDetailsResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->ResponseCode = interfaceMemberResponseCode;
        result->LampID = interfaceMemberLampID;
        result->LampDetails = interfaceMemberLampDetails;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }
    
    static LampGetLampDetailsResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new LampGetLampDetailsResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
    uint32 m_interfaceMemberResponseCode;
    Platform::String^ m_interfaceMemberLampID;
    Windows::Foundation::Collections::IMap<Platform::String^,Platform::Object^>^ m_interfaceMemberLampDetails;
};

public ref class LampGetLampParametersResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property uint32 ResponseCode
    {
        uint32 get() { return m_interfaceMemberResponseCode; }
    internal:
        void set(_In_ uint32 value) { m_interfaceMemberResponseCode = value; }
    }
    property Platform::String^ LampID
    {
        Platform::String^ get() { return m_interfaceMemberLampID; }
    internal:
        void set(_In_ Platform::String^ value) { m_interfaceMemberLampID = value; }
    }
    property Windows::Foundation::Collections::IMap<Platform::String^,Platform::Object^>^ LampParameters
    {
        Windows::Foundation::Collections::IMap<Platform::String^,Platform::Object^>^ get() { return m_interfaceMemberLampParameters; }
    internal:
        void set(_In_ Windows::Foundation::Collections::IMap<Platform::String^,Platform::Object^>^ value) { m_interfaceMemberLampParameters = value; }
    }
    
    static LampGetLampParametersResult^ CreateSuccessResult(_In_ uint32 interfaceMemberResponseCode, _In_ Platform::String^ interfaceMemberLampID, _In_ Windows::Foundation::Collections::IMap<Platform::String^,Platform::Object^>^ interfaceMemberLampParameters)
    {
        auto result = ref new LampGetLampParametersResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->ResponseCode = interfaceMemberResponseCode;
        result->LampID = interfaceMemberLampID;
        result->LampParameters = interfaceMemberLampParameters;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }
    
    static LampGetLampParametersResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new LampGetLampParametersResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
    uint32 m_interfaceMemberResponseCode;
    Platform::String^ m_interfaceMemberLampID;
    Windows::Foundation::Collections::IMap<Platform::String^,Platform::Object^>^ m_interfaceMemberLampParameters;
};

public ref class LampGetLampParametersFieldResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property uint32 ResponseCode
    {
        uint32 get() { return m_interfaceMemberResponseCode; }
    internal:
        void set(_In_ uint32 value) { m_interfaceMemberResponseCode = value; }
    }
    property Platform::String^ LampID
    {
        Platform::String^ get() { return m_interfaceMemberLampID; }
    internal:
        void set(_In_ Platform::String^ value) { m_interfaceMemberLampID = value; }
    }
    property Platform::String^ LampParameterFieldName
    {
        Platform::String^ get() { return m_interfaceMemberLampParameterFieldName; }
    internal:
        void set(_In_ Platform::String^ value) { m_interfaceMemberLampParameterFieldName = value; }
    }
    property Platform::Object^ LampParameterFieldValue
    {
        Platform::Object^ get() { return m_interfaceMemberLampParameterFieldValue; }
    internal:
        void set(_In_ Platform::Object^ value) { m_interfaceMemberLampParameterFieldValue = value; }
    }
    
    static LampGetLampParametersFieldResult^ CreateSuccessResult(_In_ uint32 interfaceMemberResponseCode, _In_ Platform::String^ interfaceMemberLampID, _In_ Platform::String^ interfaceMemberLampParameterFieldName, _In_ Platform::Object^ interfaceMemberLampParameterFieldValue)
    {
        auto result = ref new LampGetLampParametersFieldResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->ResponseCode = interfaceMemberResponseCode;
        result->LampID = interfaceMemberLampID;
        result->LampParameterFieldName = interfaceMemberLampParameterFieldName;
        result->LampParameterFieldValue = interfaceMemberLampParameterFieldValue;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }
    
    static LampGetLampParametersFieldResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new LampGetLampParametersFieldResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
    uint32 m_interfaceMemberResponseCode;
    Platform::String^ m_interfaceMemberLampID;
    Platform::String^ m_interfaceMemberLampParameterFieldName;
    Platform::Object^ m_interfaceMemberLampParameterFieldValue;
};

public ref class LampGetLampStateResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property uint32 ResponseCode
    {
        uint32 get() { return m_interfaceMemberResponseCode; }
    internal:
        void set(_In_ uint32 value) { m_interfaceMemberResponseCode = value; }
    }
    property Platform::String^ LampID
    {
        Platform::String^ get() { return m_interfaceMemberLampID; }
    internal:
        void set(_In_ Platform::String^ value) { m_interfaceMemberLampID = value; }
    }
    property Windows::Foundation::Collections::IMap<Platform::String^,Platform::Object^>^ LampState
    {
        Windows::Foundation::Collections::IMap<Platform::String^,Platform::Object^>^ get() { return m_interfaceMemberLampState; }
    internal:
        void set(_In_ Windows::Foundation::Collections::IMap<Platform::String^,Platform::Object^>^ value) { m_interfaceMemberLampState = value; }
    }
    
    static LampGetLampStateResult^ CreateSuccessResult(_In_ uint32 interfaceMemberResponseCode, _In_ Platform::String^ interfaceMemberLampID, _In_ Windows::Foundation::Collections::IMap<Platform::String^,Platform::Object^>^ interfaceMemberLampState)
    {
        auto result = ref new LampGetLampStateResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->ResponseCode = interfaceMemberResponseCode;
        result->LampID = interfaceMemberLampID;
        result->LampState = interfaceMemberLampState;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }
    
    static LampGetLampStateResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new LampGetLampStateResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
    uint32 m_interfaceMemberResponseCode;
    Platform::String^ m_interfaceMemberLampID;
    Windows::Foundation::Collections::IMap<Platform::String^,Platform::Object^>^ m_interfaceMemberLampState;
};

public ref class LampGetLampStateFieldResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property uint32 ResponseCode
    {
        uint32 get() { return m_interfaceMemberResponseCode; }
    internal:
        void set(_In_ uint32 value) { m_interfaceMemberResponseCode = value; }
    }
    property Platform::String^ LampID
    {
        Platform::String^ get() { return m_interfaceMemberLampID; }
    internal:
        void set(_In_ Platform::String^ value) { m_interfaceMemberLampID = value; }
    }
    property Platform::String^ LampStateFieldName
    {
        Platform::String^ get() { return m_interfaceMemberLampStateFieldName; }
    internal:
        void set(_In_ Platform::String^ value) { m_interfaceMemberLampStateFieldName = value; }
    }
    property Platform::Object^ LampStateFieldValue
    {
        Platform::Object^ get() { return m_interfaceMemberLampStateFieldValue; }
    internal:
        void set(_In_ Platform::Object^ value) { m_interfaceMemberLampStateFieldValue = value; }
    }
    
    static LampGetLampStateFieldResult^ CreateSuccessResult(_In_ uint32 interfaceMemberResponseCode, _In_ Platform::String^ interfaceMemberLampID, _In_ Platform::String^ interfaceMemberLampStateFieldName, _In_ Platform::Object^ interfaceMemberLampStateFieldValue)
    {
        auto result = ref new LampGetLampStateFieldResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->ResponseCode = interfaceMemberResponseCode;
        result->LampID = interfaceMemberLampID;
        result->LampStateFieldName = interfaceMemberLampStateFieldName;
        result->LampStateFieldValue = interfaceMemberLampStateFieldValue;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }
    
    static LampGetLampStateFieldResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new LampGetLampStateFieldResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
    uint32 m_interfaceMemberResponseCode;
    Platform::String^ m_interfaceMemberLampID;
    Platform::String^ m_interfaceMemberLampStateFieldName;
    Platform::Object^ m_interfaceMemberLampStateFieldValue;
};

public ref class LampTransitionLampStateResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property uint32 ResponseCode
    {
        uint32 get() { return m_interfaceMemberResponseCode; }
    internal:
        void set(_In_ uint32 value) { m_interfaceMemberResponseCode = value; }
    }
    property Platform::String^ LampID
    {
        Platform::String^ get() { return m_interfaceMemberLampID; }
    internal:
        void set(_In_ Platform::String^ value) { m_interfaceMemberLampID = value; }
    }
    
    static LampTransitionLampStateResult^ CreateSuccessResult(_In_ uint32 interfaceMemberResponseCode, _In_ Platform::String^ interfaceMemberLampID)
    {
        auto result = ref new LampTransitionLampStateResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->ResponseCode = interfaceMemberResponseCode;
        result->LampID = interfaceMemberLampID;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }
    
    static LampTransitionLampStateResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new LampTransitionLampStateResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
    uint32 m_interfaceMemberResponseCode;
    Platform::String^ m_interfaceMemberLampID;
};

public ref class LampPulseLampWithStateResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property uint32 ResponseCode
    {
        uint32 get() { return m_interfaceMemberResponseCode; }
    internal:
        void set(_In_ uint32 value) { m_interfaceMemberResponseCode = value; }
    }
    property Platform::String^ LampID
    {
        Platform::String^ get() { return m_interfaceMemberLampID; }
    internal:
        void set(_In_ Platform::String^ value) { m_interfaceMemberLampID = value; }
    }
    
    static LampPulseLampWithStateResult^ CreateSuccessResult(_In_ uint32 interfaceMemberResponseCode, _In_ Platform::String^ interfaceMemberLampID)
    {
        auto result = ref new LampPulseLampWithStateResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->ResponseCode = interfaceMemberResponseCode;
        result->LampID = interfaceMemberLampID;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }
    
    static LampPulseLampWithStateResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new LampPulseLampWithStateResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
    uint32 m_interfaceMemberResponseCode;
    Platform::String^ m_interfaceMemberLampID;
};

public ref class LampPulseLampWithPresetResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property uint32 ResponseCode
    {
        uint32 get() { return m_interfaceMemberResponseCode; }
    internal:
        void set(_In_ uint32 value) { m_interfaceMemberResponseCode = value; }
    }
    property Platform::String^ LampID
    {
        Platform::String^ get() { return m_interfaceMemberLampID; }
    internal:
        void set(_In_ Platform::String^ value) { m_interfaceMemberLampID = value; }
    }
    
    static LampPulseLampWithPresetResult^ CreateSuccessResult(_In_ uint32 interfaceMemberResponseCode, _In_ Platform::String^ interfaceMemberLampID)
    {
        auto result = ref new LampPulseLampWithPresetResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->ResponseCode = interfaceMemberResponseCode;
        result->LampID = interfaceMemberLampID;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }
    
    static LampPulseLampWithPresetResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new LampPulseLampWithPresetResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
    uint32 m_interfaceMemberResponseCode;
    Platform::String^ m_interfaceMemberLampID;
};

public ref class LampTransitionLampStateToPresetResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property uint32 ResponseCode
    {
        uint32 get() { return m_interfaceMemberResponseCode; }
    internal:
        void set(_In_ uint32 value) { m_interfaceMemberResponseCode = value; }
    }
    property Platform::String^ LampID
    {
        Platform::String^ get() { return m_interfaceMemberLampID; }
    internal:
        void set(_In_ Platform::String^ value) { m_interfaceMemberLampID = value; }
    }
    
    static LampTransitionLampStateToPresetResult^ CreateSuccessResult(_In_ uint32 interfaceMemberResponseCode, _In_ Platform::String^ interfaceMemberLampID)
    {
        auto result = ref new LampTransitionLampStateToPresetResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->ResponseCode = interfaceMemberResponseCode;
        result->LampID = interfaceMemberLampID;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }
    
    static LampTransitionLampStateToPresetResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new LampTransitionLampStateToPresetResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
    uint32 m_interfaceMemberResponseCode;
    Platform::String^ m_interfaceMemberLampID;
};

public ref class LampTransitionLampStateFieldResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property uint32 ResponseCode
    {
        uint32 get() { return m_interfaceMemberResponseCode; }
    internal:
        void set(_In_ uint32 value) { m_interfaceMemberResponseCode = value; }
    }
    property Platform::String^ LampID
    {
        Platform::String^ get() { return m_interfaceMemberLampID; }
    internal:
        void set(_In_ Platform::String^ value) { m_interfaceMemberLampID = value; }
    }
    property Platform::String^ LampStateFieldName
    {
        Platform::String^ get() { return m_interfaceMemberLampStateFieldName; }
    internal:
        void set(_In_ Platform::String^ value) { m_interfaceMemberLampStateFieldName = value; }
    }
    
    static LampTransitionLampStateFieldResult^ CreateSuccessResult(_In_ uint32 interfaceMemberResponseCode, _In_ Platform::String^ interfaceMemberLampID, _In_ Platform::String^ interfaceMemberLampStateFieldName)
    {
        auto result = ref new LampTransitionLampStateFieldResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->ResponseCode = interfaceMemberResponseCode;
        result->LampID = interfaceMemberLampID;
        result->LampStateFieldName = interfaceMemberLampStateFieldName;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }
    
    static LampTransitionLampStateFieldResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new LampTransitionLampStateFieldResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
    uint32 m_interfaceMemberResponseCode;
    Platform::String^ m_interfaceMemberLampID;
    Platform::String^ m_interfaceMemberLampStateFieldName;
};

public ref class LampResetLampStateResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property uint32 ResponseCode
    {
        uint32 get() { return m_interfaceMemberResponseCode; }
    internal:
        void set(_In_ uint32 value) { m_interfaceMemberResponseCode = value; }
    }
    property Platform::String^ LampID
    {
        Platform::String^ get() { return m_interfaceMemberLampID; }
    internal:
        void set(_In_ Platform::String^ value) { m_interfaceMemberLampID = value; }
    }
    
    static LampResetLampStateResult^ CreateSuccessResult(_In_ uint32 interfaceMemberResponseCode, _In_ Platform::String^ interfaceMemberLampID)
    {
        auto result = ref new LampResetLampStateResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->ResponseCode = interfaceMemberResponseCode;
        result->LampID = interfaceMemberLampID;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }
    
    static LampResetLampStateResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new LampResetLampStateResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
    uint32 m_interfaceMemberResponseCode;
    Platform::String^ m_interfaceMemberLampID;
};

public ref class LampResetLampStateFieldResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property uint32 ResponseCode
    {
        uint32 get() { return m_interfaceMemberResponseCode; }
    internal:
        void set(_In_ uint32 value) { m_interfaceMemberResponseCode = value; }
    }
    property Platform::String^ LampID
    {
        Platform::String^ get() { return m_interfaceMemberLampID; }
    internal:
        void set(_In_ Platform::String^ value) { m_interfaceMemberLampID = value; }
    }
    property Platform::String^ LampStateFieldName
    {
        Platform::String^ get() { return m_interfaceMemberLampStateFieldName; }
    internal:
        void set(_In_ Platform::String^ value) { m_interfaceMemberLampStateFieldName = value; }
    }
    
    static LampResetLampStateFieldResult^ CreateSuccessResult(_In_ uint32 interfaceMemberResponseCode, _In_ Platform::String^ interfaceMemberLampID, _In_ Platform::String^ interfaceMemberLampStateFieldName)
    {
        auto result = ref new LampResetLampStateFieldResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->ResponseCode = interfaceMemberResponseCode;
        result->LampID = interfaceMemberLampID;
        result->LampStateFieldName = interfaceMemberLampStateFieldName;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }
    
    static LampResetLampStateFieldResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new LampResetLampStateFieldResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
    uint32 m_interfaceMemberResponseCode;
    Platform::String^ m_interfaceMemberLampID;
    Platform::String^ m_interfaceMemberLampStateFieldName;
};

public ref class LampGetLampFaultsResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property uint32 ResponseCode
    {
        uint32 get() { return m_interfaceMemberResponseCode; }
    internal:
        void set(_In_ uint32 value) { m_interfaceMemberResponseCode = value; }
    }
    property Platform::String^ LampID
    {
        Platform::String^ get() { return m_interfaceMemberLampID; }
    internal:
        void set(_In_ Platform::String^ value) { m_interfaceMemberLampID = value; }
    }
    property Windows::Foundation::Collections::IVector<uint32>^ LampFaults
    {
        Windows::Foundation::Collections::IVector<uint32>^ get() { return m_interfaceMemberLampFaults; }
    internal:
        void set(_In_ Windows::Foundation::Collections::IVector<uint32>^ value) { m_interfaceMemberLampFaults = value; }
    }
    
    static LampGetLampFaultsResult^ CreateSuccessResult(_In_ uint32 interfaceMemberResponseCode, _In_ Platform::String^ interfaceMemberLampID, _In_ Windows::Foundation::Collections::IVector<uint32>^ interfaceMemberLampFaults)
    {
        auto result = ref new LampGetLampFaultsResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->ResponseCode = interfaceMemberResponseCode;
        result->LampID = interfaceMemberLampID;
        result->LampFaults = interfaceMemberLampFaults;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }
    
    static LampGetLampFaultsResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new LampGetLampFaultsResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
    uint32 m_interfaceMemberResponseCode;
    Platform::String^ m_interfaceMemberLampID;
    Windows::Foundation::Collections::IVector<uint32>^ m_interfaceMemberLampFaults;
};

public ref class LampClearLampFaultResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property uint32 ResponseCode
    {
        uint32 get() { return m_interfaceMemberResponseCode; }
    internal:
        void set(_In_ uint32 value) { m_interfaceMemberResponseCode = value; }
    }
    property Platform::String^ LampID
    {
        Platform::String^ get() { return m_interfaceMemberLampID; }
    internal:
        void set(_In_ Platform::String^ value) { m_interfaceMemberLampID = value; }
    }
    property uint32 LampFault
    {
        uint32 get() { return m_interfaceMemberLampFault; }
    internal:
        void set(_In_ uint32 value) { m_interfaceMemberLampFault = value; }
    }
    
    static LampClearLampFaultResult^ CreateSuccessResult(_In_ uint32 interfaceMemberResponseCode, _In_ Platform::String^ interfaceMemberLampID, _In_ uint32 interfaceMemberLampFault)
    {
        auto result = ref new LampClearLampFaultResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->ResponseCode = interfaceMemberResponseCode;
        result->LampID = interfaceMemberLampID;
        result->LampFault = interfaceMemberLampFault;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }
    
    static LampClearLampFaultResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new LampClearLampFaultResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
    uint32 m_interfaceMemberResponseCode;
    Platform::String^ m_interfaceMemberLampID;
    uint32 m_interfaceMemberLampFault;
};

public ref class LampGetLampServiceVersionResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property uint32 ResponseCode
    {
        uint32 get() { return m_interfaceMemberResponseCode; }
    internal:
        void set(_In_ uint32 value) { m_interfaceMemberResponseCode = value; }
    }
    property Platform::String^ LampID
    {
        Platform::String^ get() { return m_interfaceMemberLampID; }
    internal:
        void set(_In_ Platform::String^ value) { m_interfaceMemberLampID = value; }
    }
    property uint32 LampServiceVersion
    {
        uint32 get() { return m_interfaceMemberLampServiceVersion; }
    internal:
        void set(_In_ uint32 value) { m_interfaceMemberLampServiceVersion = value; }
    }
    
    static LampGetLampServiceVersionResult^ CreateSuccessResult(_In_ uint32 interfaceMemberResponseCode, _In_ Platform::String^ interfaceMemberLampID, _In_ uint32 interfaceMemberLampServiceVersion)
    {
        auto result = ref new LampGetLampServiceVersionResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->ResponseCode = interfaceMemberResponseCode;
        result->LampID = interfaceMemberLampID;
        result->LampServiceVersion = interfaceMemberLampServiceVersion;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }
    
    static LampGetLampServiceVersionResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new LampGetLampServiceVersionResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
    uint32 m_interfaceMemberResponseCode;
    Platform::String^ m_interfaceMemberLampID;
    uint32 m_interfaceMemberLampServiceVersion;
};

public ref class LampJoinSessionResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property LampConsumer^ Consumer
    {
        LampConsumer^ get() { return m_consumer; }
    internal:
        void set(_In_ LampConsumer^ value) { m_consumer = value; }
    };

private:
    int32 m_status;
    LampConsumer^ m_consumer;
};

public ref class LampGetVersionResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property uint32 Version
    {
        uint32 get() { return m_value; }
    internal:
        void set(_In_ uint32 value) { m_value = value; }
    }

    static LampGetVersionResult^ CreateSuccessResult(_In_ uint32 value)
    {
        auto result = ref new LampGetVersionResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->Version = value;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }

    static LampGetVersionResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new LampGetVersionResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
    uint32 m_value;
};

} } } } } 
