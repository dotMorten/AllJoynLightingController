//-----------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
//
//   For more information, see: http://go.microsoft.com/fwlink/?LinkID=623246
// </auto-generated>
//-----------------------------------------------------------------------------
#include "pch.h"

using namespace Microsoft::WRL;
using namespace Platform;
using namespace Windows::Devices::AllJoyn;
using namespace Windows::Foundation;
using namespace org::allseen::LSF::ControllerService::Lamp;

void LampLegacySignals::Initialize(_In_ alljoyn_busobject busObject, _In_ alljoyn_sessionid sessionId)
{
    m_busObject = busObject;
    m_sessionId = sessionId;

    auto interfaceDefinition = alljoyn_busattachment_getinterface(alljoyn_busobject_getbusattachment(busObject), "org.allseen.LSF.ControllerService.Lamp");
    alljoyn_interfacedescription_getmember(interfaceDefinition, "LampNameChanged", &m_memberLampNameChanged);
    alljoyn_interfacedescription_getmember(interfaceDefinition, "LampStateChanged", &m_memberLampStateChanged);
    alljoyn_interfacedescription_getmember(interfaceDefinition, "LampsFound", &m_memberLampsFound);
    alljoyn_interfacedescription_getmember(interfaceDefinition, "LampsLost", &m_memberLampsLost);
}

void LampLegacySignals::LampNameChanged(_In_ Platform::String^ interfaceMemberLampID, _In_ Platform::String^ interfaceMemberLampName)
{
    if (nullptr == m_busObject)
    {
        return;
    }

    size_t argCount = 2;
    alljoyn_msgarg arguments = alljoyn_msgarg_array_create(argCount);
    (void)TypeConversionHelpers::SetAllJoynMessageArg(alljoyn_msgarg_array_element(arguments, 0), "s", interfaceMemberLampID);
    (void)TypeConversionHelpers::SetAllJoynMessageArg(alljoyn_msgarg_array_element(arguments, 1), "s", interfaceMemberLampName);
    
    alljoyn_busobject_signal(
        m_busObject, 
        NULL,  // Generated code only supports broadcast signals.
        m_sessionId,
        m_memberLampNameChanged,
        arguments,
        argCount, 
        0, // A signal with a TTL of 0 will be sent to every member of the session, regardless of how long it takes to deliver the message
        ALLJOYN_MESSAGE_FLAG_GLOBAL_BROADCAST, // Broadcast to everyone in the session.
        NULL); // The generated code does not need the generated signal message

    alljoyn_msgarg_destroy(arguments);
}

void LampLegacySignals::CallLampNameChangedReceived(_In_ LampLegacySignals^ sender, _In_ LampLampNameChangedReceivedEventArgs^ args)
{
    LampNameChangedReceived(sender, args);
}

void LampLegacySignals::LampStateChanged(_In_ Platform::String^ interfaceMemberLampID, _In_ Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ interfaceMemberLampState)
{
    if (nullptr == m_busObject)
    {
        return;
    }

    size_t argCount = 2;
    alljoyn_msgarg arguments = alljoyn_msgarg_array_create(argCount);
    (void)TypeConversionHelpers::SetAllJoynMessageArg(alljoyn_msgarg_array_element(arguments, 0), "s", interfaceMemberLampID);
    (void)TypeConversionHelpers::SetAllJoynMessageArg(alljoyn_msgarg_array_element(arguments, 1), "a{sv}", interfaceMemberLampState);
    
    alljoyn_busobject_signal(
        m_busObject, 
        NULL,  // Generated code only supports broadcast signals.
        m_sessionId,
        m_memberLampStateChanged,
        arguments,
        argCount, 
        0, // A signal with a TTL of 0 will be sent to every member of the session, regardless of how long it takes to deliver the message
        ALLJOYN_MESSAGE_FLAG_GLOBAL_BROADCAST, // Broadcast to everyone in the session.
        NULL); // The generated code does not need the generated signal message

    alljoyn_msgarg_destroy(arguments);
}

void LampLegacySignals::CallLampStateChangedReceived(_In_ LampLegacySignals^ sender, _In_ LampLampStateChangedReceivedEventArgs^ args)
{
    LampStateChangedReceived(sender, args);
}

void LampLegacySignals::LampsFound(_In_ Windows::Foundation::Collections::IVectorView<Platform::String^>^ interfaceMemberLampIDs)
{
    if (nullptr == m_busObject)
    {
        return;
    }

    size_t argCount = 1;
    alljoyn_msgarg arguments = alljoyn_msgarg_array_create(argCount);
    (void)TypeConversionHelpers::SetAllJoynMessageArg(alljoyn_msgarg_array_element(arguments, 0), "as", interfaceMemberLampIDs);
    
    alljoyn_busobject_signal(
        m_busObject, 
        NULL,  // Generated code only supports broadcast signals.
        m_sessionId,
        m_memberLampsFound,
        arguments,
        argCount, 
        0, // A signal with a TTL of 0 will be sent to every member of the session, regardless of how long it takes to deliver the message
        ALLJOYN_MESSAGE_FLAG_GLOBAL_BROADCAST, // Broadcast to everyone in the session.
        NULL); // The generated code does not need the generated signal message

    alljoyn_msgarg_destroy(arguments);
}

void LampLegacySignals::CallLampsFoundReceived(_In_ LampLegacySignals^ sender, _In_ LampLampsFoundReceivedEventArgs^ args)
{
    LampsFoundReceived(sender, args);
}

void LampLegacySignals::LampsLost(_In_ Windows::Foundation::Collections::IVectorView<Platform::String^>^ interfaceMemberLampIDs)
{
    if (nullptr == m_busObject)
    {
        return;
    }

    size_t argCount = 1;
    alljoyn_msgarg arguments = alljoyn_msgarg_array_create(argCount);
    (void)TypeConversionHelpers::SetAllJoynMessageArg(alljoyn_msgarg_array_element(arguments, 0), "as", interfaceMemberLampIDs);
    
    alljoyn_busobject_signal(
        m_busObject, 
        NULL,  // Generated code only supports broadcast signals.
        m_sessionId,
        m_memberLampsLost,
        arguments,
        argCount, 
        0, // A signal with a TTL of 0 will be sent to every member of the session, regardless of how long it takes to deliver the message
        ALLJOYN_MESSAGE_FLAG_GLOBAL_BROADCAST, // Broadcast to everyone in the session.
        NULL); // The generated code does not need the generated signal message

    alljoyn_msgarg_destroy(arguments);
}

void LampLegacySignals::CallLampsLostReceived(_In_ LampLegacySignals^ sender, _In_ LampLampsLostReceivedEventArgs^ args)
{
    LampsLostReceived(sender, args);
}

