//-----------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
//
//   For more information, see: http://go.microsoft.com/fwlink/?LinkID=623246
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace org { namespace allseen { namespace LSF { namespace ControllerService { namespace LampGroup {

// Methods
public ref class LampGroupGetAllLampGroupIDsCalledEventArgs sealed
{
public:
    LampGroupGetAllLampGroupIDsCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampGroupGetAllLampGroupIDsResult^ Result
    {
        LampGroupGetAllLampGroupIDsResult^ get() { return m_result; }
        void set(_In_ LampGroupGetAllLampGroupIDsResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampGroupGetAllLampGroupIDsResult^>^ GetResultAsync(LampGroupGetAllLampGroupIDsCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampGroupGetAllLampGroupIDsResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampGroupGetAllLampGroupIDsResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampGroupGetAllLampGroupIDsResult^ m_result;
};

public ref class LampGroupGetLampGroupNameCalledEventArgs sealed
{
public:
    LampGroupGetLampGroupNameCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberLampGroupID, _In_ Platform::String^ interfaceMemberLanguage);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampGroupGetLampGroupNameResult^ Result
    {
        LampGroupGetLampGroupNameResult^ get() { return m_result; }
        void set(_In_ LampGroupGetLampGroupNameResult^ value) { m_result = value; }
    }

    property Platform::String^ LampGroupID
    {
        Platform::String^ get() { return m_interfaceMemberLampGroupID; }
    }

    property Platform::String^ Language
    {
        Platform::String^ get() { return m_interfaceMemberLanguage; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampGroupGetLampGroupNameResult^>^ GetResultAsync(LampGroupGetLampGroupNameCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampGroupGetLampGroupNameResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampGroupGetLampGroupNameResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampGroupGetLampGroupNameResult^ m_result;
    Platform::String^ m_interfaceMemberLampGroupID;
    Platform::String^ m_interfaceMemberLanguage;
};

public ref class LampGroupSetLampGroupNameCalledEventArgs sealed
{
public:
    LampGroupSetLampGroupNameCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberLampGroupID, _In_ Platform::String^ interfaceMemberLampGroupName, _In_ Platform::String^ interfaceMemberLanguage);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampGroupSetLampGroupNameResult^ Result
    {
        LampGroupSetLampGroupNameResult^ get() { return m_result; }
        void set(_In_ LampGroupSetLampGroupNameResult^ value) { m_result = value; }
    }

    property Platform::String^ LampGroupID
    {
        Platform::String^ get() { return m_interfaceMemberLampGroupID; }
    }

    property Platform::String^ LampGroupName
    {
        Platform::String^ get() { return m_interfaceMemberLampGroupName; }
    }

    property Platform::String^ Language
    {
        Platform::String^ get() { return m_interfaceMemberLanguage; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampGroupSetLampGroupNameResult^>^ GetResultAsync(LampGroupSetLampGroupNameCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampGroupSetLampGroupNameResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampGroupSetLampGroupNameResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampGroupSetLampGroupNameResult^ m_result;
    Platform::String^ m_interfaceMemberLampGroupID;
    Platform::String^ m_interfaceMemberLampGroupName;
    Platform::String^ m_interfaceMemberLanguage;
};

public ref class LampGroupCreateLampGroupCalledEventArgs sealed
{
public:
    LampGroupCreateLampGroupCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Windows::Foundation::Collections::IVectorView<Platform::String^>^ interfaceMemberLampIDs, _In_ Windows::Foundation::Collections::IVectorView<Platform::String^>^ interfaceMemberLampGroupIDs, _In_ Platform::String^ interfaceMemberLampGroupName, _In_ Platform::String^ interfaceMemberLanguage);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampGroupCreateLampGroupResult^ Result
    {
        LampGroupCreateLampGroupResult^ get() { return m_result; }
        void set(_In_ LampGroupCreateLampGroupResult^ value) { m_result = value; }
    }

    property Windows::Foundation::Collections::IVectorView<Platform::String^>^ LampIDs
    {
        Windows::Foundation::Collections::IVectorView<Platform::String^>^ get() { return m_interfaceMemberLampIDs; }
    }

    property Windows::Foundation::Collections::IVectorView<Platform::String^>^ LampGroupIDs
    {
        Windows::Foundation::Collections::IVectorView<Platform::String^>^ get() { return m_interfaceMemberLampGroupIDs; }
    }

    property Platform::String^ LampGroupName
    {
        Platform::String^ get() { return m_interfaceMemberLampGroupName; }
    }

    property Platform::String^ Language
    {
        Platform::String^ get() { return m_interfaceMemberLanguage; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampGroupCreateLampGroupResult^>^ GetResultAsync(LampGroupCreateLampGroupCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampGroupCreateLampGroupResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampGroupCreateLampGroupResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampGroupCreateLampGroupResult^ m_result;
    Windows::Foundation::Collections::IVectorView<Platform::String^>^ m_interfaceMemberLampIDs;
    Windows::Foundation::Collections::IVectorView<Platform::String^>^ m_interfaceMemberLampGroupIDs;
    Platform::String^ m_interfaceMemberLampGroupName;
    Platform::String^ m_interfaceMemberLanguage;
};

public ref class LampGroupUpdateLampGroupCalledEventArgs sealed
{
public:
    LampGroupUpdateLampGroupCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberLampGroupID, _In_ Windows::Foundation::Collections::IVectorView<Platform::String^>^ interfaceMemberLampIDs, _In_ Windows::Foundation::Collections::IVectorView<Platform::String^>^ interfaceMemberLampGroupIDs);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampGroupUpdateLampGroupResult^ Result
    {
        LampGroupUpdateLampGroupResult^ get() { return m_result; }
        void set(_In_ LampGroupUpdateLampGroupResult^ value) { m_result = value; }
    }

    property Platform::String^ LampGroupID
    {
        Platform::String^ get() { return m_interfaceMemberLampGroupID; }
    }

    property Windows::Foundation::Collections::IVectorView<Platform::String^>^ LampIDs
    {
        Windows::Foundation::Collections::IVectorView<Platform::String^>^ get() { return m_interfaceMemberLampIDs; }
    }

    property Windows::Foundation::Collections::IVectorView<Platform::String^>^ LampGroupIDs
    {
        Windows::Foundation::Collections::IVectorView<Platform::String^>^ get() { return m_interfaceMemberLampGroupIDs; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampGroupUpdateLampGroupResult^>^ GetResultAsync(LampGroupUpdateLampGroupCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampGroupUpdateLampGroupResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampGroupUpdateLampGroupResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampGroupUpdateLampGroupResult^ m_result;
    Platform::String^ m_interfaceMemberLampGroupID;
    Windows::Foundation::Collections::IVectorView<Platform::String^>^ m_interfaceMemberLampIDs;
    Windows::Foundation::Collections::IVectorView<Platform::String^>^ m_interfaceMemberLampGroupIDs;
};

public ref class LampGroupDeleteLampGroupCalledEventArgs sealed
{
public:
    LampGroupDeleteLampGroupCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberLampGroupID);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampGroupDeleteLampGroupResult^ Result
    {
        LampGroupDeleteLampGroupResult^ get() { return m_result; }
        void set(_In_ LampGroupDeleteLampGroupResult^ value) { m_result = value; }
    }

    property Platform::String^ LampGroupID
    {
        Platform::String^ get() { return m_interfaceMemberLampGroupID; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampGroupDeleteLampGroupResult^>^ GetResultAsync(LampGroupDeleteLampGroupCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampGroupDeleteLampGroupResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampGroupDeleteLampGroupResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampGroupDeleteLampGroupResult^ m_result;
    Platform::String^ m_interfaceMemberLampGroupID;
};

public ref class LampGroupGetLampGroupCalledEventArgs sealed
{
public:
    LampGroupGetLampGroupCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberLampGroupID);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampGroupGetLampGroupResult^ Result
    {
        LampGroupGetLampGroupResult^ get() { return m_result; }
        void set(_In_ LampGroupGetLampGroupResult^ value) { m_result = value; }
    }

    property Platform::String^ LampGroupID
    {
        Platform::String^ get() { return m_interfaceMemberLampGroupID; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampGroupGetLampGroupResult^>^ GetResultAsync(LampGroupGetLampGroupCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampGroupGetLampGroupResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampGroupGetLampGroupResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampGroupGetLampGroupResult^ m_result;
    Platform::String^ m_interfaceMemberLampGroupID;
};

public ref class LampGroupTransitionLampGroupStateCalledEventArgs sealed
{
public:
    LampGroupTransitionLampGroupStateCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberLampGroupID, _In_ Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ interfaceMemberLampState, _In_ uint32 interfaceMemberTransitionPeriod);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampGroupTransitionLampGroupStateResult^ Result
    {
        LampGroupTransitionLampGroupStateResult^ get() { return m_result; }
        void set(_In_ LampGroupTransitionLampGroupStateResult^ value) { m_result = value; }
    }

    property Platform::String^ LampGroupID
    {
        Platform::String^ get() { return m_interfaceMemberLampGroupID; }
    }

    property Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ LampState
    {
        Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ get() { return m_interfaceMemberLampState; }
    }

    property uint32 TransitionPeriod
    {
        uint32 get() { return m_interfaceMemberTransitionPeriod; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampGroupTransitionLampGroupStateResult^>^ GetResultAsync(LampGroupTransitionLampGroupStateCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampGroupTransitionLampGroupStateResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampGroupTransitionLampGroupStateResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampGroupTransitionLampGroupStateResult^ m_result;
    Platform::String^ m_interfaceMemberLampGroupID;
    Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ m_interfaceMemberLampState;
    uint32 m_interfaceMemberTransitionPeriod;
};

public ref class LampGroupPulseLampGroupWithStateCalledEventArgs sealed
{
public:
    LampGroupPulseLampGroupWithStateCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberLampGroupID, _In_ Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ interfaceMemberFromLampGroupState, _In_ Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ interfaceMemberToLampGroupState, _In_ uint32 interfaceMemberPeriod, _In_ uint32 interfaceMemberDuration, _In_ uint32 interfaceMemberNumPulses);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampGroupPulseLampGroupWithStateResult^ Result
    {
        LampGroupPulseLampGroupWithStateResult^ get() { return m_result; }
        void set(_In_ LampGroupPulseLampGroupWithStateResult^ value) { m_result = value; }
    }

    property Platform::String^ LampGroupID
    {
        Platform::String^ get() { return m_interfaceMemberLampGroupID; }
    }

    property Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ FromLampGroupState
    {
        Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ get() { return m_interfaceMemberFromLampGroupState; }
    }

    property Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ ToLampGroupState
    {
        Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ get() { return m_interfaceMemberToLampGroupState; }
    }

    property uint32 Period
    {
        uint32 get() { return m_interfaceMemberPeriod; }
    }

    property uint32 Duration
    {
        uint32 get() { return m_interfaceMemberDuration; }
    }

    property uint32 NumPulses
    {
        uint32 get() { return m_interfaceMemberNumPulses; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampGroupPulseLampGroupWithStateResult^>^ GetResultAsync(LampGroupPulseLampGroupWithStateCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampGroupPulseLampGroupWithStateResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampGroupPulseLampGroupWithStateResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampGroupPulseLampGroupWithStateResult^ m_result;
    Platform::String^ m_interfaceMemberLampGroupID;
    Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ m_interfaceMemberFromLampGroupState;
    Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ m_interfaceMemberToLampGroupState;
    uint32 m_interfaceMemberPeriod;
    uint32 m_interfaceMemberDuration;
    uint32 m_interfaceMemberNumPulses;
};

public ref class LampGroupPulseLampGroupWithPresetCalledEventArgs sealed
{
public:
    LampGroupPulseLampGroupWithPresetCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberLampGroupID, _In_ Platform::String^ interfaceMemberFromPresetID, _In_ Platform::String^ interfaceMemberToPresetID, _In_ uint32 interfaceMemberPeriod, _In_ uint32 interfaceMemberDuration, _In_ uint32 interfaceMemberNumPulses);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampGroupPulseLampGroupWithPresetResult^ Result
    {
        LampGroupPulseLampGroupWithPresetResult^ get() { return m_result; }
        void set(_In_ LampGroupPulseLampGroupWithPresetResult^ value) { m_result = value; }
    }

    property Platform::String^ LampGroupID
    {
        Platform::String^ get() { return m_interfaceMemberLampGroupID; }
    }

    property Platform::String^ FromPresetID
    {
        Platform::String^ get() { return m_interfaceMemberFromPresetID; }
    }

    property Platform::String^ ToPresetID
    {
        Platform::String^ get() { return m_interfaceMemberToPresetID; }
    }

    property uint32 Period
    {
        uint32 get() { return m_interfaceMemberPeriod; }
    }

    property uint32 Duration
    {
        uint32 get() { return m_interfaceMemberDuration; }
    }

    property uint32 NumPulses
    {
        uint32 get() { return m_interfaceMemberNumPulses; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampGroupPulseLampGroupWithPresetResult^>^ GetResultAsync(LampGroupPulseLampGroupWithPresetCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampGroupPulseLampGroupWithPresetResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampGroupPulseLampGroupWithPresetResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampGroupPulseLampGroupWithPresetResult^ m_result;
    Platform::String^ m_interfaceMemberLampGroupID;
    Platform::String^ m_interfaceMemberFromPresetID;
    Platform::String^ m_interfaceMemberToPresetID;
    uint32 m_interfaceMemberPeriod;
    uint32 m_interfaceMemberDuration;
    uint32 m_interfaceMemberNumPulses;
};

public ref class LampGroupTransitionLampGroupStateToPresetCalledEventArgs sealed
{
public:
    LampGroupTransitionLampGroupStateToPresetCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberLampGroupID, _In_ Platform::String^ interfaceMemberPresetID, _In_ uint32 interfaceMemberTransitionPeriod);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampGroupTransitionLampGroupStateToPresetResult^ Result
    {
        LampGroupTransitionLampGroupStateToPresetResult^ get() { return m_result; }
        void set(_In_ LampGroupTransitionLampGroupStateToPresetResult^ value) { m_result = value; }
    }

    property Platform::String^ LampGroupID
    {
        Platform::String^ get() { return m_interfaceMemberLampGroupID; }
    }

    property Platform::String^ PresetID
    {
        Platform::String^ get() { return m_interfaceMemberPresetID; }
    }

    property uint32 TransitionPeriod
    {
        uint32 get() { return m_interfaceMemberTransitionPeriod; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampGroupTransitionLampGroupStateToPresetResult^>^ GetResultAsync(LampGroupTransitionLampGroupStateToPresetCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampGroupTransitionLampGroupStateToPresetResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampGroupTransitionLampGroupStateToPresetResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampGroupTransitionLampGroupStateToPresetResult^ m_result;
    Platform::String^ m_interfaceMemberLampGroupID;
    Platform::String^ m_interfaceMemberPresetID;
    uint32 m_interfaceMemberTransitionPeriod;
};

public ref class LampGroupTransitionLampGroupStateFieldCalledEventArgs sealed
{
public:
    LampGroupTransitionLampGroupStateFieldCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberLampGroupID, _In_ Platform::String^ interfaceMemberLampGroupStateFieldName, _In_ Platform::Object^ interfaceMemberLampGroupStateFieldValue, _In_ uint32 interfaceMemberTransitionPeriod);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampGroupTransitionLampGroupStateFieldResult^ Result
    {
        LampGroupTransitionLampGroupStateFieldResult^ get() { return m_result; }
        void set(_In_ LampGroupTransitionLampGroupStateFieldResult^ value) { m_result = value; }
    }

    property Platform::String^ LampGroupID
    {
        Platform::String^ get() { return m_interfaceMemberLampGroupID; }
    }

    property Platform::String^ LampGroupStateFieldName
    {
        Platform::String^ get() { return m_interfaceMemberLampGroupStateFieldName; }
    }

    property Platform::Object^ LampGroupStateFieldValue
    {
        Platform::Object^ get() { return m_interfaceMemberLampGroupStateFieldValue; }
    }

    property uint32 TransitionPeriod
    {
        uint32 get() { return m_interfaceMemberTransitionPeriod; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampGroupTransitionLampGroupStateFieldResult^>^ GetResultAsync(LampGroupTransitionLampGroupStateFieldCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampGroupTransitionLampGroupStateFieldResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampGroupTransitionLampGroupStateFieldResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampGroupTransitionLampGroupStateFieldResult^ m_result;
    Platform::String^ m_interfaceMemberLampGroupID;
    Platform::String^ m_interfaceMemberLampGroupStateFieldName;
    Platform::Object^ m_interfaceMemberLampGroupStateFieldValue;
    uint32 m_interfaceMemberTransitionPeriod;
};

public ref class LampGroupResetLampGroupStateCalledEventArgs sealed
{
public:
    LampGroupResetLampGroupStateCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberLampGroupID);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampGroupResetLampGroupStateResult^ Result
    {
        LampGroupResetLampGroupStateResult^ get() { return m_result; }
        void set(_In_ LampGroupResetLampGroupStateResult^ value) { m_result = value; }
    }

    property Platform::String^ LampGroupID
    {
        Platform::String^ get() { return m_interfaceMemberLampGroupID; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampGroupResetLampGroupStateResult^>^ GetResultAsync(LampGroupResetLampGroupStateCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampGroupResetLampGroupStateResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampGroupResetLampGroupStateResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampGroupResetLampGroupStateResult^ m_result;
    Platform::String^ m_interfaceMemberLampGroupID;
};

public ref class LampGroupResetLampGroupStateFieldCalledEventArgs sealed
{
public:
    LampGroupResetLampGroupStateFieldCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberLampGroupID, _In_ Platform::String^ interfaceMemberLampGroupStateFieldName);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampGroupResetLampGroupStateFieldResult^ Result
    {
        LampGroupResetLampGroupStateFieldResult^ get() { return m_result; }
        void set(_In_ LampGroupResetLampGroupStateFieldResult^ value) { m_result = value; }
    }

    property Platform::String^ LampGroupID
    {
        Platform::String^ get() { return m_interfaceMemberLampGroupID; }
    }

    property Platform::String^ LampGroupStateFieldName
    {
        Platform::String^ get() { return m_interfaceMemberLampGroupStateFieldName; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampGroupResetLampGroupStateFieldResult^>^ GetResultAsync(LampGroupResetLampGroupStateFieldCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampGroupResetLampGroupStateFieldResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampGroupResetLampGroupStateFieldResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampGroupResetLampGroupStateFieldResult^ m_result;
    Platform::String^ m_interfaceMemberLampGroupID;
    Platform::String^ m_interfaceMemberLampGroupStateFieldName;
};

// Readable Properties
public ref class LampGroupGetVersionRequestedEventArgs sealed
{
public:
    LampGroupGetVersionRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampGroupGetVersionResult^ Result
    {
        LampGroupGetVersionResult^ get() { return m_result; }
        void set(_In_ LampGroupGetVersionResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampGroupGetVersionResult^>^ GetResultAsync(LampGroupGetVersionRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampGroupGetVersionResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampGroupGetVersionResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampGroupGetVersionResult^ m_result;
};

// Writable Properties
} } } } } 
