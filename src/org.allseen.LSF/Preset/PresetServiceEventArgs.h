//-----------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
//
//   For more information, see: http://go.microsoft.com/fwlink/?LinkID=623246
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace org { namespace allseen { namespace LSF { namespace ControllerService { namespace Preset {

// Methods
public ref class PresetGetDefaultLampStateCalledEventArgs sealed
{
public:
    PresetGetDefaultLampStateCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property PresetGetDefaultLampStateResult^ Result
    {
        PresetGetDefaultLampStateResult^ get() { return m_result; }
        void set(_In_ PresetGetDefaultLampStateResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<PresetGetDefaultLampStateResult^>^ GetResultAsync(PresetGetDefaultLampStateCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<PresetGetDefaultLampStateResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<PresetGetDefaultLampStateResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    PresetGetDefaultLampStateResult^ m_result;
};

public ref class PresetSetDefaultLampStateCalledEventArgs sealed
{
public:
    PresetSetDefaultLampStateCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ interfaceMemberLampState);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property PresetSetDefaultLampStateResult^ Result
    {
        PresetSetDefaultLampStateResult^ get() { return m_result; }
        void set(_In_ PresetSetDefaultLampStateResult^ value) { m_result = value; }
    }

    property Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ LampState
    {
        Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ get() { return m_interfaceMemberLampState; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<PresetSetDefaultLampStateResult^>^ GetResultAsync(PresetSetDefaultLampStateCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<PresetSetDefaultLampStateResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<PresetSetDefaultLampStateResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    PresetSetDefaultLampStateResult^ m_result;
    Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ m_interfaceMemberLampState;
};

public ref class PresetGetAllPresetIDsCalledEventArgs sealed
{
public:
    PresetGetAllPresetIDsCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property PresetGetAllPresetIDsResult^ Result
    {
        PresetGetAllPresetIDsResult^ get() { return m_result; }
        void set(_In_ PresetGetAllPresetIDsResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<PresetGetAllPresetIDsResult^>^ GetResultAsync(PresetGetAllPresetIDsCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<PresetGetAllPresetIDsResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<PresetGetAllPresetIDsResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    PresetGetAllPresetIDsResult^ m_result;
};

public ref class PresetGetPresetNameCalledEventArgs sealed
{
public:
    PresetGetPresetNameCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberPresetID, _In_ Platform::String^ interfaceMemberLanguage);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property PresetGetPresetNameResult^ Result
    {
        PresetGetPresetNameResult^ get() { return m_result; }
        void set(_In_ PresetGetPresetNameResult^ value) { m_result = value; }
    }

    property Platform::String^ PresetID
    {
        Platform::String^ get() { return m_interfaceMemberPresetID; }
    }

    property Platform::String^ Language
    {
        Platform::String^ get() { return m_interfaceMemberLanguage; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<PresetGetPresetNameResult^>^ GetResultAsync(PresetGetPresetNameCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<PresetGetPresetNameResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<PresetGetPresetNameResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    PresetGetPresetNameResult^ m_result;
    Platform::String^ m_interfaceMemberPresetID;
    Platform::String^ m_interfaceMemberLanguage;
};

public ref class PresetSetPresetNameCalledEventArgs sealed
{
public:
    PresetSetPresetNameCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberPresetID, _In_ Platform::String^ interfaceMemberPresetName, _In_ Platform::String^ interfaceMemberLanguage);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property PresetSetPresetNameResult^ Result
    {
        PresetSetPresetNameResult^ get() { return m_result; }
        void set(_In_ PresetSetPresetNameResult^ value) { m_result = value; }
    }

    property Platform::String^ PresetID
    {
        Platform::String^ get() { return m_interfaceMemberPresetID; }
    }

    property Platform::String^ PresetName
    {
        Platform::String^ get() { return m_interfaceMemberPresetName; }
    }

    property Platform::String^ Language
    {
        Platform::String^ get() { return m_interfaceMemberLanguage; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<PresetSetPresetNameResult^>^ GetResultAsync(PresetSetPresetNameCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<PresetSetPresetNameResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<PresetSetPresetNameResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    PresetSetPresetNameResult^ m_result;
    Platform::String^ m_interfaceMemberPresetID;
    Platform::String^ m_interfaceMemberPresetName;
    Platform::String^ m_interfaceMemberLanguage;
};

public ref class PresetCreatePresetCalledEventArgs sealed
{
public:
    PresetCreatePresetCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ interfaceMemberLampState, _In_ Platform::String^ interfaceMemberPresetName, _In_ Platform::String^ interfaceMemberLanguage);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property PresetCreatePresetResult^ Result
    {
        PresetCreatePresetResult^ get() { return m_result; }
        void set(_In_ PresetCreatePresetResult^ value) { m_result = value; }
    }

    property Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ LampState
    {
        Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ get() { return m_interfaceMemberLampState; }
    }

    property Platform::String^ PresetName
    {
        Platform::String^ get() { return m_interfaceMemberPresetName; }
    }

    property Platform::String^ Language
    {
        Platform::String^ get() { return m_interfaceMemberLanguage; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<PresetCreatePresetResult^>^ GetResultAsync(PresetCreatePresetCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<PresetCreatePresetResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<PresetCreatePresetResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    PresetCreatePresetResult^ m_result;
    Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ m_interfaceMemberLampState;
    Platform::String^ m_interfaceMemberPresetName;
    Platform::String^ m_interfaceMemberLanguage;
};

public ref class PresetUpdatePresetCalledEventArgs sealed
{
public:
    PresetUpdatePresetCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberPresetID, _In_ Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ interfaceMemberLampState);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property PresetUpdatePresetResult^ Result
    {
        PresetUpdatePresetResult^ get() { return m_result; }
        void set(_In_ PresetUpdatePresetResult^ value) { m_result = value; }
    }

    property Platform::String^ PresetID
    {
        Platform::String^ get() { return m_interfaceMemberPresetID; }
    }

    property Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ LampState
    {
        Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ get() { return m_interfaceMemberLampState; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<PresetUpdatePresetResult^>^ GetResultAsync(PresetUpdatePresetCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<PresetUpdatePresetResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<PresetUpdatePresetResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    PresetUpdatePresetResult^ m_result;
    Platform::String^ m_interfaceMemberPresetID;
    Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ m_interfaceMemberLampState;
};

public ref class PresetDeletePresetCalledEventArgs sealed
{
public:
    PresetDeletePresetCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberPresetID);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property PresetDeletePresetResult^ Result
    {
        PresetDeletePresetResult^ get() { return m_result; }
        void set(_In_ PresetDeletePresetResult^ value) { m_result = value; }
    }

    property Platform::String^ PresetID
    {
        Platform::String^ get() { return m_interfaceMemberPresetID; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<PresetDeletePresetResult^>^ GetResultAsync(PresetDeletePresetCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<PresetDeletePresetResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<PresetDeletePresetResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    PresetDeletePresetResult^ m_result;
    Platform::String^ m_interfaceMemberPresetID;
};

public ref class PresetGetPresetCalledEventArgs sealed
{
public:
    PresetGetPresetCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberPresetID);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property PresetGetPresetResult^ Result
    {
        PresetGetPresetResult^ get() { return m_result; }
        void set(_In_ PresetGetPresetResult^ value) { m_result = value; }
    }

    property Platform::String^ PresetID
    {
        Platform::String^ get() { return m_interfaceMemberPresetID; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<PresetGetPresetResult^>^ GetResultAsync(PresetGetPresetCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<PresetGetPresetResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<PresetGetPresetResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    PresetGetPresetResult^ m_result;
    Platform::String^ m_interfaceMemberPresetID;
};

// Readable Properties
public ref class PresetGetVersionRequestedEventArgs sealed
{
public:
    PresetGetVersionRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property PresetGetVersionResult^ Result
    {
        PresetGetVersionResult^ get() { return m_result; }
        void set(_In_ PresetGetVersionResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<PresetGetVersionResult^>^ GetResultAsync(PresetGetVersionRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<PresetGetVersionResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<PresetGetVersionResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    PresetGetVersionResult^ m_result;
};

// Writable Properties
} } } } } 
