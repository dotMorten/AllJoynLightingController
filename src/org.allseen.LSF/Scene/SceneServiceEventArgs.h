//-----------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
//
//   For more information, see: http://go.microsoft.com/fwlink/?LinkID=623246
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace org { namespace allseen { namespace LSF { namespace ControllerService { namespace Scene {

// Methods
public ref class SceneGetAllSceneIDsCalledEventArgs sealed
{
public:
    SceneGetAllSceneIDsCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property SceneGetAllSceneIDsResult^ Result
    {
        SceneGetAllSceneIDsResult^ get() { return m_result; }
        void set(_In_ SceneGetAllSceneIDsResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<SceneGetAllSceneIDsResult^>^ GetResultAsync(SceneGetAllSceneIDsCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<SceneGetAllSceneIDsResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<SceneGetAllSceneIDsResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    SceneGetAllSceneIDsResult^ m_result;
};

public ref class SceneGetSceneNameCalledEventArgs sealed
{
public:
    SceneGetSceneNameCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberSceneID, _In_ Platform::String^ interfaceMemberLanguage);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property SceneGetSceneNameResult^ Result
    {
        SceneGetSceneNameResult^ get() { return m_result; }
        void set(_In_ SceneGetSceneNameResult^ value) { m_result = value; }
    }

    property Platform::String^ SceneID
    {
        Platform::String^ get() { return m_interfaceMemberSceneID; }
    }

    property Platform::String^ Language
    {
        Platform::String^ get() { return m_interfaceMemberLanguage; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<SceneGetSceneNameResult^>^ GetResultAsync(SceneGetSceneNameCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<SceneGetSceneNameResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<SceneGetSceneNameResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    SceneGetSceneNameResult^ m_result;
    Platform::String^ m_interfaceMemberSceneID;
    Platform::String^ m_interfaceMemberLanguage;
};

public ref class SceneSetSceneNameCalledEventArgs sealed
{
public:
    SceneSetSceneNameCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberSceneID, _In_ Platform::String^ interfaceMemberSceneName, _In_ Platform::String^ interfaceMemberLanguage);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property SceneSetSceneNameResult^ Result
    {
        SceneSetSceneNameResult^ get() { return m_result; }
        void set(_In_ SceneSetSceneNameResult^ value) { m_result = value; }
    }

    property Platform::String^ SceneID
    {
        Platform::String^ get() { return m_interfaceMemberSceneID; }
    }

    property Platform::String^ SceneName
    {
        Platform::String^ get() { return m_interfaceMemberSceneName; }
    }

    property Platform::String^ Language
    {
        Platform::String^ get() { return m_interfaceMemberLanguage; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<SceneSetSceneNameResult^>^ GetResultAsync(SceneSetSceneNameCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<SceneSetSceneNameResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<SceneSetSceneNameResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    SceneSetSceneNameResult^ m_result;
    Platform::String^ m_interfaceMemberSceneID;
    Platform::String^ m_interfaceMemberSceneName;
    Platform::String^ m_interfaceMemberLanguage;
};

public ref class SceneCreateSceneCalledEventArgs sealed
{
public:
    SceneCreateSceneCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Windows::Foundation::Collections::IVectorView<SceneTransitionlampsLampGroupsToStateItem^>^ interfaceMemberTransitionlampsLampGroupsToState, _In_ Windows::Foundation::Collections::IVectorView<SceneTransitionlampsLampGroupsToPresetItem^>^ interfaceMemberTransitionlampsLampGroupsToPreset, _In_ Windows::Foundation::Collections::IVectorView<ScenePulselampsLampGroupsWithStateItem^>^ interfaceMemberPulselampsLampGroupsWithState, _In_ Windows::Foundation::Collections::IVectorView<ScenePulselampsLampGroupsWithPresetItem^>^ interfaceMemberPulselampsLampGroupsWithPreset, _In_ Platform::String^ interfaceMemberSceneName, _In_ Platform::String^ interfaceMemberLanguage);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property SceneCreateSceneResult^ Result
    {
        SceneCreateSceneResult^ get() { return m_result; }
        void set(_In_ SceneCreateSceneResult^ value) { m_result = value; }
    }

    property Windows::Foundation::Collections::IVectorView<SceneTransitionlampsLampGroupsToStateItem^>^ TransitionlampsLampGroupsToState
    {
        Windows::Foundation::Collections::IVectorView<SceneTransitionlampsLampGroupsToStateItem^>^ get() { return m_interfaceMemberTransitionlampsLampGroupsToState; }
    }

    property Windows::Foundation::Collections::IVectorView<SceneTransitionlampsLampGroupsToPresetItem^>^ TransitionlampsLampGroupsToPreset
    {
        Windows::Foundation::Collections::IVectorView<SceneTransitionlampsLampGroupsToPresetItem^>^ get() { return m_interfaceMemberTransitionlampsLampGroupsToPreset; }
    }

    property Windows::Foundation::Collections::IVectorView<ScenePulselampsLampGroupsWithStateItem^>^ PulselampsLampGroupsWithState
    {
        Windows::Foundation::Collections::IVectorView<ScenePulselampsLampGroupsWithStateItem^>^ get() { return m_interfaceMemberPulselampsLampGroupsWithState; }
    }

    property Windows::Foundation::Collections::IVectorView<ScenePulselampsLampGroupsWithPresetItem^>^ PulselampsLampGroupsWithPreset
    {
        Windows::Foundation::Collections::IVectorView<ScenePulselampsLampGroupsWithPresetItem^>^ get() { return m_interfaceMemberPulselampsLampGroupsWithPreset; }
    }

    property Platform::String^ SceneName
    {
        Platform::String^ get() { return m_interfaceMemberSceneName; }
    }

    property Platform::String^ Language
    {
        Platform::String^ get() { return m_interfaceMemberLanguage; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<SceneCreateSceneResult^>^ GetResultAsync(SceneCreateSceneCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<SceneCreateSceneResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<SceneCreateSceneResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    SceneCreateSceneResult^ m_result;
    Windows::Foundation::Collections::IVectorView<SceneTransitionlampsLampGroupsToStateItem^>^ m_interfaceMemberTransitionlampsLampGroupsToState;
    Windows::Foundation::Collections::IVectorView<SceneTransitionlampsLampGroupsToPresetItem^>^ m_interfaceMemberTransitionlampsLampGroupsToPreset;
    Windows::Foundation::Collections::IVectorView<ScenePulselampsLampGroupsWithStateItem^>^ m_interfaceMemberPulselampsLampGroupsWithState;
    Windows::Foundation::Collections::IVectorView<ScenePulselampsLampGroupsWithPresetItem^>^ m_interfaceMemberPulselampsLampGroupsWithPreset;
    Platform::String^ m_interfaceMemberSceneName;
    Platform::String^ m_interfaceMemberLanguage;
};

public ref class SceneUpdateSceneCalledEventArgs sealed
{
public:
    SceneUpdateSceneCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberSceneID, _In_ Windows::Foundation::Collections::IVectorView<SceneTransitionlampsLampGroupsToStateItem^>^ interfaceMemberTransitionlampsLampGroupsToState, _In_ Windows::Foundation::Collections::IVectorView<SceneTransitionlampsLampGroupsToPresetItem^>^ interfaceMemberTransitionlampsLampGroupsToPreset, _In_ Windows::Foundation::Collections::IVectorView<ScenePulselampsLampGroupsWithStateItem^>^ interfaceMemberPulselampsLampGroupsWithState, _In_ Windows::Foundation::Collections::IVectorView<ScenePulselampsLampGroupsWithPresetItem^>^ interfaceMemberPulselampsLampGroupsWithPreset);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property SceneUpdateSceneResult^ Result
    {
        SceneUpdateSceneResult^ get() { return m_result; }
        void set(_In_ SceneUpdateSceneResult^ value) { m_result = value; }
    }

    property Platform::String^ SceneID
    {
        Platform::String^ get() { return m_interfaceMemberSceneID; }
    }

    property Windows::Foundation::Collections::IVectorView<SceneTransitionlampsLampGroupsToStateItem^>^ TransitionlampsLampGroupsToState
    {
        Windows::Foundation::Collections::IVectorView<SceneTransitionlampsLampGroupsToStateItem^>^ get() { return m_interfaceMemberTransitionlampsLampGroupsToState; }
    }

    property Windows::Foundation::Collections::IVectorView<SceneTransitionlampsLampGroupsToPresetItem^>^ TransitionlampsLampGroupsToPreset
    {
        Windows::Foundation::Collections::IVectorView<SceneTransitionlampsLampGroupsToPresetItem^>^ get() { return m_interfaceMemberTransitionlampsLampGroupsToPreset; }
    }

    property Windows::Foundation::Collections::IVectorView<ScenePulselampsLampGroupsWithStateItem^>^ PulselampsLampGroupsWithState
    {
        Windows::Foundation::Collections::IVectorView<ScenePulselampsLampGroupsWithStateItem^>^ get() { return m_interfaceMemberPulselampsLampGroupsWithState; }
    }

    property Windows::Foundation::Collections::IVectorView<ScenePulselampsLampGroupsWithPresetItem^>^ PulselampsLampGroupsWithPreset
    {
        Windows::Foundation::Collections::IVectorView<ScenePulselampsLampGroupsWithPresetItem^>^ get() { return m_interfaceMemberPulselampsLampGroupsWithPreset; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<SceneUpdateSceneResult^>^ GetResultAsync(SceneUpdateSceneCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<SceneUpdateSceneResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<SceneUpdateSceneResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    SceneUpdateSceneResult^ m_result;
    Platform::String^ m_interfaceMemberSceneID;
    Windows::Foundation::Collections::IVectorView<SceneTransitionlampsLampGroupsToStateItem^>^ m_interfaceMemberTransitionlampsLampGroupsToState;
    Windows::Foundation::Collections::IVectorView<SceneTransitionlampsLampGroupsToPresetItem^>^ m_interfaceMemberTransitionlampsLampGroupsToPreset;
    Windows::Foundation::Collections::IVectorView<ScenePulselampsLampGroupsWithStateItem^>^ m_interfaceMemberPulselampsLampGroupsWithState;
    Windows::Foundation::Collections::IVectorView<ScenePulselampsLampGroupsWithPresetItem^>^ m_interfaceMemberPulselampsLampGroupsWithPreset;
};

public ref class SceneDeleteSceneCalledEventArgs sealed
{
public:
    SceneDeleteSceneCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberSceneID);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property SceneDeleteSceneResult^ Result
    {
        SceneDeleteSceneResult^ get() { return m_result; }
        void set(_In_ SceneDeleteSceneResult^ value) { m_result = value; }
    }

    property Platform::String^ SceneID
    {
        Platform::String^ get() { return m_interfaceMemberSceneID; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<SceneDeleteSceneResult^>^ GetResultAsync(SceneDeleteSceneCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<SceneDeleteSceneResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<SceneDeleteSceneResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    SceneDeleteSceneResult^ m_result;
    Platform::String^ m_interfaceMemberSceneID;
};

public ref class SceneGetSceneCalledEventArgs sealed
{
public:
    SceneGetSceneCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberSceneID);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property SceneGetSceneResult^ Result
    {
        SceneGetSceneResult^ get() { return m_result; }
        void set(_In_ SceneGetSceneResult^ value) { m_result = value; }
    }

    property Platform::String^ SceneID
    {
        Platform::String^ get() { return m_interfaceMemberSceneID; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<SceneGetSceneResult^>^ GetResultAsync(SceneGetSceneCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<SceneGetSceneResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<SceneGetSceneResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    SceneGetSceneResult^ m_result;
    Platform::String^ m_interfaceMemberSceneID;
};

public ref class SceneApplySceneCalledEventArgs sealed
{
public:
    SceneApplySceneCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberSceneID);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property SceneApplySceneResult^ Result
    {
        SceneApplySceneResult^ get() { return m_result; }
        void set(_In_ SceneApplySceneResult^ value) { m_result = value; }
    }

    property Platform::String^ SceneID
    {
        Platform::String^ get() { return m_interfaceMemberSceneID; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<SceneApplySceneResult^>^ GetResultAsync(SceneApplySceneCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<SceneApplySceneResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<SceneApplySceneResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    SceneApplySceneResult^ m_result;
    Platform::String^ m_interfaceMemberSceneID;
};

// Readable Properties
public ref class SceneGetVersionRequestedEventArgs sealed
{
public:
    SceneGetVersionRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property SceneGetVersionResult^ Result
    {
        SceneGetVersionResult^ get() { return m_result; }
        void set(_In_ SceneGetVersionResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<SceneGetVersionResult^>^ GetResultAsync(SceneGetVersionRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<SceneGetVersionResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<SceneGetVersionResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    SceneGetVersionResult^ m_result;
};

// Writable Properties
} } } } } 
